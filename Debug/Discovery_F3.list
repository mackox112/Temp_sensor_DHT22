
Discovery_F3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003200  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08003388  08003388  00013388  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080033b8  080033b8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080033b8  080033b8  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080033b8  080033b8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080033b8  080033b8  000133b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080033bc  080033bc  000133bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080033c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          00000184  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000190  20000190  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000ea88  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001daa  00000000  00000000  0002eac4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000eb0  00000000  00000000  00030870  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000dc8  00000000  00000000  00031720  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001de45  00000000  00000000  000324e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00011c4b  00000000  00000000  0005032d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b5afa  00000000  00000000  00061f78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00117a72  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003eb8  00000000  00000000  00117ac4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003370 	.word	0x08003370

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08003370 	.word	0x08003370

080001c8 <delay>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void delay (uint16_t time)
{
 80001c8:	b480      	push	{r7}
 80001ca:	b083      	sub	sp, #12
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	4603      	mov	r3, r0
 80001d0:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim1,0);
 80001d2:	4b09      	ldr	r3, [pc, #36]	; (80001f8 <delay+0x30>)
 80001d4:	681b      	ldr	r3, [r3, #0]
 80001d6:	2200      	movs	r2, #0
 80001d8:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&htim1)<time);
 80001da:	bf00      	nop
 80001dc:	4b06      	ldr	r3, [pc, #24]	; (80001f8 <delay+0x30>)
 80001de:	681b      	ldr	r3, [r3, #0]
 80001e0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80001e2:	88fb      	ldrh	r3, [r7, #6]
 80001e4:	429a      	cmp	r2, r3
 80001e6:	d3f9      	bcc.n	80001dc <delay+0x14>
}
 80001e8:	bf00      	nop
 80001ea:	bf00      	nop
 80001ec:	370c      	adds	r7, #12
 80001ee:	46bd      	mov	sp, r7
 80001f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001f4:	4770      	bx	lr
 80001f6:	bf00      	nop
 80001f8:	200000e0 	.word	0x200000e0

080001fc <SET_PIN_OUTPUT>:
float RH=0;


void SET_PIN_OUTPUT (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)

{
 80001fc:	b580      	push	{r7, lr}
 80001fe:	b088      	sub	sp, #32
 8000200:	af00      	add	r7, sp, #0
 8000202:	6078      	str	r0, [r7, #4]
 8000204:	460b      	mov	r3, r1
 8000206:	807b      	strh	r3, [r7, #2]
		GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000208:	f107 030c 	add.w	r3, r7, #12
 800020c:	2200      	movs	r2, #0
 800020e:	601a      	str	r2, [r3, #0]
 8000210:	605a      	str	r2, [r3, #4]
 8000212:	609a      	str	r2, [r3, #8]
 8000214:	60da      	str	r2, [r3, #12]
 8000216:	611a      	str	r2, [r3, #16]
		GPIO_InitStruct.Pin = GPIO_Pin;
 8000218:	887b      	ldrh	r3, [r7, #2]
 800021a:	60fb      	str	r3, [r7, #12]
		GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800021c:	2301      	movs	r3, #1
 800021e:	613b      	str	r3, [r7, #16]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000220:	2300      	movs	r3, #0
 8000222:	61bb      	str	r3, [r7, #24]
		HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8000224:	f107 030c 	add.w	r3, r7, #12
 8000228:	4619      	mov	r1, r3
 800022a:	6878      	ldr	r0, [r7, #4]
 800022c:	f000 fdf8 	bl	8000e20 <HAL_GPIO_Init>


}
 8000230:	bf00      	nop
 8000232:	3720      	adds	r7, #32
 8000234:	46bd      	mov	sp, r7
 8000236:	bd80      	pop	{r7, pc}

08000238 <SET_PIN_INPUT>:



void SET_PIN_INPUT (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)

{
 8000238:	b580      	push	{r7, lr}
 800023a:	b088      	sub	sp, #32
 800023c:	af00      	add	r7, sp, #0
 800023e:	6078      	str	r0, [r7, #4]
 8000240:	460b      	mov	r3, r1
 8000242:	807b      	strh	r3, [r7, #2]
		GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000244:	f107 030c 	add.w	r3, r7, #12
 8000248:	2200      	movs	r2, #0
 800024a:	601a      	str	r2, [r3, #0]
 800024c:	605a      	str	r2, [r3, #4]
 800024e:	609a      	str	r2, [r3, #8]
 8000250:	60da      	str	r2, [r3, #12]
 8000252:	611a      	str	r2, [r3, #16]
		GPIO_InitStruct.Pin = GPIO_Pin;
 8000254:	887b      	ldrh	r3, [r7, #2]
 8000256:	60fb      	str	r3, [r7, #12]
		GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000258:	2300      	movs	r3, #0
 800025a:	613b      	str	r3, [r7, #16]
		GPIO_InitStruct.Pull = GPIO_NOPULL; //GPIO_PULLUP
 800025c:	2300      	movs	r3, #0
 800025e:	617b      	str	r3, [r7, #20]
		HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8000260:	f107 030c 	add.w	r3, r7, #12
 8000264:	4619      	mov	r1, r3
 8000266:	6878      	ldr	r0, [r7, #4]
 8000268:	f000 fdda 	bl	8000e20 <HAL_GPIO_Init>


}
 800026c:	bf00      	nop
 800026e:	3720      	adds	r7, #32
 8000270:	46bd      	mov	sp, r7
 8000272:	bd80      	pop	{r7, pc}

08000274 <DHT22_Start>:



void DHT22_Start (void)
{
 8000274:	b580      	push	{r7, lr}
 8000276:	af00      	add	r7, sp, #0
	SET_PIN_OUTPUT (DHT22_PORT, DHT22_PIN);
 8000278:	2110      	movs	r1, #16
 800027a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800027e:	f7ff ffbd 	bl	80001fc <SET_PIN_OUTPUT>
	HAL_GPIO_WritePin(DHT22_PORT, DHT22_PIN, 0); // pull the pin low
 8000282:	2200      	movs	r2, #0
 8000284:	2110      	movs	r1, #16
 8000286:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800028a:	f000 ff5b 	bl	8001144 <HAL_GPIO_WritePin>
	delay(2000);
 800028e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000292:	f7ff ff99 	bl	80001c8 <delay>
	HAL_GPIO_WritePin(DHT22_PORT, DHT22_PIN, 1);
 8000296:	2201      	movs	r2, #1
 8000298:	2110      	movs	r1, #16
 800029a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800029e:	f000 ff51 	bl	8001144 <HAL_GPIO_WritePin>
	delay(22); //////////////////////////////////////////////////////////////////////////// in us
 80002a2:	2016      	movs	r0, #22
 80002a4:	f7ff ff90 	bl	80001c8 <delay>
	SET_PIN_INPUT(DHT22_PORT, DHT22_PIN);
 80002a8:	2110      	movs	r1, #16
 80002aa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002ae:	f7ff ffc3 	bl	8000238 <SET_PIN_INPUT>

}
 80002b2:	bf00      	nop
 80002b4:	bd80      	pop	{r7, pc}

080002b6 <DHT22_Check_response>:

uint16_t DHT22_Check_response(void)
{
 80002b6:	b580      	push	{r7, lr}
 80002b8:	b082      	sub	sp, #8
 80002ba:	af00      	add	r7, sp, #0
	uint8_t Response =0;
 80002bc:	2300      	movs	r3, #0
 80002be:	71fb      	strb	r3, [r7, #7]
	delay(40);///////////////////////////////////////////////////
 80002c0:	2028      	movs	r0, #40	; 0x28
 80002c2:	f7ff ff81 	bl	80001c8 <delay>
	if (!HAL_GPIO_ReadPin(DHT22_PORT, DHT22_PIN))
 80002c6:	2110      	movs	r1, #16
 80002c8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002cc:	f000 ff22 	bl	8001114 <HAL_GPIO_ReadPin>
 80002d0:	4603      	mov	r3, r0
 80002d2:	2b00      	cmp	r3, #0
 80002d4:	d10f      	bne.n	80002f6 <DHT22_Check_response+0x40>
	{
		delay(80);//////////////////////////////////////////////////////
 80002d6:	2050      	movs	r0, #80	; 0x50
 80002d8:	f7ff ff76 	bl	80001c8 <delay>
		if (HAL_GPIO_ReadPin(DHT22_PORT, DHT22_PIN)) Response =1;
 80002dc:	2110      	movs	r1, #16
 80002de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002e2:	f000 ff17 	bl	8001114 <HAL_GPIO_ReadPin>
 80002e6:	4603      	mov	r3, r0
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d002      	beq.n	80002f2 <DHT22_Check_response+0x3c>
 80002ec:	2301      	movs	r3, #1
 80002ee:	71fb      	strb	r3, [r7, #7]
 80002f0:	e001      	b.n	80002f6 <DHT22_Check_response+0x40>
		else Response = -1;
 80002f2:	23ff      	movs	r3, #255	; 0xff
 80002f4:	71fb      	strb	r3, [r7, #7]

//		while (HAL_GPIO_ReadPin(DHT22_PORT, DHT22_PIN)); // waiting for the pin to go low

	}
	return Response;
 80002f6:	79fb      	ldrb	r3, [r7, #7]
 80002f8:	b29b      	uxth	r3, r3
}
 80002fa:	4618      	mov	r0, r3
 80002fc:	3708      	adds	r7, #8
 80002fe:	46bd      	mov	sp, r7
 8000300:	bd80      	pop	{r7, pc}

08000302 <DHT22_Read>:

uint8_t DHT22_Read (void)
{
 8000302:	b580      	push	{r7, lr}
 8000304:	b082      	sub	sp, #8
 8000306:	af00      	add	r7, sp, #0
	uint8_t i,j;
	for (j=0; j<8; j++)
 8000308:	2300      	movs	r3, #0
 800030a:	71bb      	strb	r3, [r7, #6]
 800030c:	e03a      	b.n	8000384 <DHT22_Read+0x82>
	{
		while (!HAL_GPIO_ReadPin(DHT22_PORT, DHT22_PIN)) //wait for the pin to go high
 800030e:	bf00      	nop
 8000310:	2110      	movs	r1, #16
 8000312:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000316:	f000 fefd 	bl	8001114 <HAL_GPIO_ReadPin>
 800031a:	4603      	mov	r3, r0
 800031c:	2b00      	cmp	r3, #0
 800031e:	d0f7      	beq.n	8000310 <DHT22_Read+0xe>
		{}
			delay(40);//////////////////////////////////////////////////
 8000320:	2028      	movs	r0, #40	; 0x28
 8000322:	f7ff ff51 	bl	80001c8 <delay>
			if (!HAL_GPIO_ReadPin(DHT22_PORT, DHT22_PIN)) // if the pin is low
 8000326:	2110      	movs	r1, #16
 8000328:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800032c:	f000 fef2 	bl	8001114 <HAL_GPIO_ReadPin>
 8000330:	4603      	mov	r3, r0
 8000332:	2b00      	cmp	r3, #0
 8000334:	d10e      	bne.n	8000354 <DHT22_Read+0x52>
			{
				i&= ~(1<<(7-j)); //write 0
 8000336:	79bb      	ldrb	r3, [r7, #6]
 8000338:	f1c3 0307 	rsb	r3, r3, #7
 800033c:	2201      	movs	r2, #1
 800033e:	fa02 f303 	lsl.w	r3, r2, r3
 8000342:	b25b      	sxtb	r3, r3
 8000344:	43db      	mvns	r3, r3
 8000346:	b25a      	sxtb	r2, r3
 8000348:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800034c:	4013      	ands	r3, r2
 800034e:	b25b      	sxtb	r3, r3
 8000350:	71fb      	strb	r3, [r7, #7]
 8000352:	e00b      	b.n	800036c <DHT22_Read+0x6a>

			}
			else i|= (1<<(7-j)); // if the pin is high write 1
 8000354:	79bb      	ldrb	r3, [r7, #6]
 8000356:	f1c3 0307 	rsb	r3, r3, #7
 800035a:	2201      	movs	r2, #1
 800035c:	fa02 f303 	lsl.w	r3, r2, r3
 8000360:	b25a      	sxtb	r2, r3
 8000362:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000366:	4313      	orrs	r3, r2
 8000368:	b25b      	sxtb	r3, r3
 800036a:	71fb      	strb	r3, [r7, #7]
					while (HAL_GPIO_ReadPin(DHT22_PORT, DHT22_PIN)); //wait for the pin to go low
 800036c:	bf00      	nop
 800036e:	2110      	movs	r1, #16
 8000370:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000374:	f000 fece 	bl	8001114 <HAL_GPIO_ReadPin>
 8000378:	4603      	mov	r3, r0
 800037a:	2b00      	cmp	r3, #0
 800037c:	d1f7      	bne.n	800036e <DHT22_Read+0x6c>
	for (j=0; j<8; j++)
 800037e:	79bb      	ldrb	r3, [r7, #6]
 8000380:	3301      	adds	r3, #1
 8000382:	71bb      	strb	r3, [r7, #6]
 8000384:	79bb      	ldrb	r3, [r7, #6]
 8000386:	2b07      	cmp	r3, #7
 8000388:	d9c1      	bls.n	800030e <DHT22_Read+0xc>

	}
	return i;
 800038a:	79fb      	ldrb	r3, [r7, #7]
}
 800038c:	4618      	mov	r0, r3
 800038e:	3708      	adds	r7, #8
 8000390:	46bd      	mov	sp, r7
 8000392:	bd80      	pop	{r7, pc}

08000394 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000394:	b580      	push	{r7, lr}
 8000396:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000398:	f000 fbd2 	bl	8000b40 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800039c:	f000 f894 	bl	80004c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80003a0:	f000 f9f4 	bl	800078c <MX_GPIO_Init>
  MX_I2C1_Init();
 80003a4:	f000 f8ea 	bl	800057c <MX_I2C1_Init>
  MX_SPI1_Init();
 80003a8:	f000 f928 	bl	80005fc <MX_SPI1_Init>
  MX_TIM6_Init();
 80003ac:	f000 f9b8 	bl	8000720 <MX_TIM6_Init>
  MX_TIM1_Init();
 80003b0:	f000 f962 	bl	8000678 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
HAL_TIM_Base_Start(&htim6);
 80003b4:	4839      	ldr	r0, [pc, #228]	; (800049c <main+0x108>)
 80003b6:	f002 fcd9 	bl	8002d6c <HAL_TIM_Base_Start>
HAL_TIM_Base_Start(&htim1);
 80003ba:	4839      	ldr	r0, [pc, #228]	; (80004a0 <main+0x10c>)
 80003bc:	f002 fcd6 	bl	8002d6c <HAL_TIM_Base_Start>

while (1)
  {


	  DHT22_Start();
 80003c0:	f7ff ff58 	bl	8000274 <DHT22_Start>
	 	  Presence = DHT22_Check_response();
 80003c4:	f7ff ff77 	bl	80002b6 <DHT22_Check_response>
 80003c8:	4603      	mov	r3, r0
 80003ca:	b2da      	uxtb	r2, r3
 80003cc:	4b35      	ldr	r3, [pc, #212]	; (80004a4 <main+0x110>)
 80003ce:	701a      	strb	r2, [r3, #0]

	 	  if (!Presence)
 80003d0:	4b34      	ldr	r3, [pc, #208]	; (80004a4 <main+0x110>)
 80003d2:	781b      	ldrb	r3, [r3, #0]
 80003d4:	2b00      	cmp	r3, #0
 80003d6:	d101      	bne.n	80003dc <main+0x48>
	 	  {
	 		  Error_Handler();
 80003d8:	f000 fa68 	bl	80008ac <Error_Handler>
	 	  }

	 	  RH1 = DHT22_Read();
 80003dc:	f7ff ff91 	bl	8000302 <DHT22_Read>
 80003e0:	4603      	mov	r3, r0
 80003e2:	461a      	mov	r2, r3
 80003e4:	4b30      	ldr	r3, [pc, #192]	; (80004a8 <main+0x114>)
 80003e6:	701a      	strb	r2, [r3, #0]
	 	  RH2 = DHT22_Read();
 80003e8:	f7ff ff8b 	bl	8000302 <DHT22_Read>
 80003ec:	4603      	mov	r3, r0
 80003ee:	461a      	mov	r2, r3
 80003f0:	4b2e      	ldr	r3, [pc, #184]	; (80004ac <main+0x118>)
 80003f2:	701a      	strb	r2, [r3, #0]
	 	  TC1 = DHT22_Read();
 80003f4:	f7ff ff85 	bl	8000302 <DHT22_Read>
 80003f8:	4603      	mov	r3, r0
 80003fa:	461a      	mov	r2, r3
 80003fc:	4b2c      	ldr	r3, [pc, #176]	; (80004b0 <main+0x11c>)
 80003fe:	701a      	strb	r2, [r3, #0]
	 	  TC2 = DHT22_Read();
 8000400:	f7ff ff7f 	bl	8000302 <DHT22_Read>
 8000404:	4603      	mov	r3, r0
 8000406:	461a      	mov	r2, r3
 8000408:	4b2a      	ldr	r3, [pc, #168]	; (80004b4 <main+0x120>)
 800040a:	701a      	strb	r2, [r3, #0]
	 	  SUM = DHT22_Read();
 800040c:	f7ff ff79 	bl	8000302 <DHT22_Read>
 8000410:	4603      	mov	r3, r0
 8000412:	b29a      	uxth	r2, r3
 8000414:	4b28      	ldr	r3, [pc, #160]	; (80004b8 <main+0x124>)
 8000416:	801a      	strh	r2, [r3, #0]

	 	  tCelsius = (float) TC1;
 8000418:	4b25      	ldr	r3, [pc, #148]	; (80004b0 <main+0x11c>)
 800041a:	781b      	ldrb	r3, [r3, #0]
 800041c:	ee07 3a90 	vmov	s15, r3
 8000420:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000424:	4b25      	ldr	r3, [pc, #148]	; (80004bc <main+0x128>)
 8000426:	edc3 7a00 	vstr	s15, [r3]
	 	  RH = (float) RH1;
 800042a:	4b1f      	ldr	r3, [pc, #124]	; (80004a8 <main+0x114>)
 800042c:	781b      	ldrb	r3, [r3, #0]
 800042e:	ee07 3a90 	vmov	s15, r3
 8000432:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000436:	4b22      	ldr	r3, [pc, #136]	; (80004c0 <main+0x12c>)
 8000438:	edc3 7a00 	vstr	s15, [r3]

	 	 if (SUM == ((RH1+RH2+TC1+TC2) & 0x00FF))
 800043c:	4b1e      	ldr	r3, [pc, #120]	; (80004b8 <main+0x124>)
 800043e:	881b      	ldrh	r3, [r3, #0]
 8000440:	4619      	mov	r1, r3
 8000442:	4b19      	ldr	r3, [pc, #100]	; (80004a8 <main+0x114>)
 8000444:	781b      	ldrb	r3, [r3, #0]
 8000446:	461a      	mov	r2, r3
 8000448:	4b18      	ldr	r3, [pc, #96]	; (80004ac <main+0x118>)
 800044a:	781b      	ldrb	r3, [r3, #0]
 800044c:	4413      	add	r3, r2
 800044e:	4a18      	ldr	r2, [pc, #96]	; (80004b0 <main+0x11c>)
 8000450:	7812      	ldrb	r2, [r2, #0]
 8000452:	4413      	add	r3, r2
 8000454:	4a17      	ldr	r2, [pc, #92]	; (80004b4 <main+0x120>)
 8000456:	7812      	ldrb	r2, [r2, #0]
 8000458:	4413      	add	r3, r2
 800045a:	b2db      	uxtb	r3, r3
 800045c:	4299      	cmp	r1, r3
 800045e:	d118      	bne.n	8000492 <main+0xfe>
	 	 {
	 	 TEMP = ((TC1<<8)|TC2); RH = ((RH1<<8)|RH2); }
 8000460:	4b13      	ldr	r3, [pc, #76]	; (80004b0 <main+0x11c>)
 8000462:	781b      	ldrb	r3, [r3, #0]
 8000464:	021b      	lsls	r3, r3, #8
 8000466:	b21a      	sxth	r2, r3
 8000468:	4b12      	ldr	r3, [pc, #72]	; (80004b4 <main+0x120>)
 800046a:	781b      	ldrb	r3, [r3, #0]
 800046c:	b21b      	sxth	r3, r3
 800046e:	4313      	orrs	r3, r2
 8000470:	b21b      	sxth	r3, r3
 8000472:	b29a      	uxth	r2, r3
 8000474:	4b13      	ldr	r3, [pc, #76]	; (80004c4 <main+0x130>)
 8000476:	801a      	strh	r2, [r3, #0]
 8000478:	4b0b      	ldr	r3, [pc, #44]	; (80004a8 <main+0x114>)
 800047a:	781b      	ldrb	r3, [r3, #0]
 800047c:	021b      	lsls	r3, r3, #8
 800047e:	4a0b      	ldr	r2, [pc, #44]	; (80004ac <main+0x118>)
 8000480:	7812      	ldrb	r2, [r2, #0]
 8000482:	4313      	orrs	r3, r2
 8000484:	ee07 3a90 	vmov	s15, r3
 8000488:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800048c:	4b0c      	ldr	r3, [pc, #48]	; (80004c0 <main+0x12c>)
 800048e:	edc3 7a00 	vstr	s15, [r3]

	 	  HAL_Delay(200);
 8000492:	20c8      	movs	r0, #200	; 0xc8
 8000494:	f000 fbba 	bl	8000c0c <HAL_Delay>
	  DHT22_Start();
 8000498:	e792      	b.n	80003c0 <main+0x2c>
 800049a:	bf00      	nop
 800049c:	2000012c 	.word	0x2000012c
 80004a0:	200000e0 	.word	0x200000e0
 80004a4:	20000180 	.word	0x20000180
 80004a8:	20000178 	.word	0x20000178
 80004ac:	20000179 	.word	0x20000179
 80004b0:	2000017a 	.word	0x2000017a
 80004b4:	2000017b 	.word	0x2000017b
 80004b8:	2000017c 	.word	0x2000017c
 80004bc:	20000184 	.word	0x20000184
 80004c0:	20000188 	.word	0x20000188
 80004c4:	2000017e 	.word	0x2000017e

080004c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b09e      	sub	sp, #120	; 0x78
 80004cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004ce:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80004d2:	2228      	movs	r2, #40	; 0x28
 80004d4:	2100      	movs	r1, #0
 80004d6:	4618      	mov	r0, r3
 80004d8:	f002 ff42 	bl	8003360 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004dc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80004e0:	2200      	movs	r2, #0
 80004e2:	601a      	str	r2, [r3, #0]
 80004e4:	605a      	str	r2, [r3, #4]
 80004e6:	609a      	str	r2, [r3, #8]
 80004e8:	60da      	str	r2, [r3, #12]
 80004ea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80004ec:	463b      	mov	r3, r7
 80004ee:	223c      	movs	r2, #60	; 0x3c
 80004f0:	2100      	movs	r1, #0
 80004f2:	4618      	mov	r0, r3
 80004f4:	f002 ff34 	bl	8003360 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80004f8:	2302      	movs	r3, #2
 80004fa:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80004fc:	2301      	movs	r3, #1
 80004fe:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000500:	2310      	movs	r3, #16
 8000502:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000504:	2302      	movs	r3, #2
 8000506:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000508:	2300      	movs	r3, #0
 800050a:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 800050c:	f44f 1320 	mov.w	r3, #2621440	; 0x280000
 8000510:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000512:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000516:	4618      	mov	r0, r3
 8000518:	f000 ff52 	bl	80013c0 <HAL_RCC_OscConfig>
 800051c:	4603      	mov	r3, r0
 800051e:	2b00      	cmp	r3, #0
 8000520:	d001      	beq.n	8000526 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8000522:	f000 f9c3 	bl	80008ac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000526:	230f      	movs	r3, #15
 8000528:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800052a:	2302      	movs	r3, #2
 800052c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800052e:	2300      	movs	r3, #0
 8000530:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000532:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000536:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000538:	2300      	movs	r3, #0
 800053a:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800053c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000540:	2101      	movs	r1, #1
 8000542:	4618      	mov	r0, r3
 8000544:	f001 ff7a 	bl	800243c <HAL_RCC_ClockConfig>
 8000548:	4603      	mov	r3, r0
 800054a:	2b00      	cmp	r3, #0
 800054c:	d001      	beq.n	8000552 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 800054e:	f000 f9ad 	bl	80008ac <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_TIM1;
 8000552:	f44f 5381 	mov.w	r3, #4128	; 0x1020
 8000556:	603b      	str	r3, [r7, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000558:	2300      	movs	r3, #0
 800055a:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 800055c:	2300      	movs	r3, #0
 800055e:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000560:	463b      	mov	r3, r7
 8000562:	4618      	mov	r0, r3
 8000564:	f002 f950 	bl	8002808 <HAL_RCCEx_PeriphCLKConfig>
 8000568:	4603      	mov	r3, r0
 800056a:	2b00      	cmp	r3, #0
 800056c:	d001      	beq.n	8000572 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800056e:	f000 f99d 	bl	80008ac <Error_Handler>
  }
}
 8000572:	bf00      	nop
 8000574:	3778      	adds	r7, #120	; 0x78
 8000576:	46bd      	mov	sp, r7
 8000578:	bd80      	pop	{r7, pc}
	...

0800057c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000580:	4b1b      	ldr	r3, [pc, #108]	; (80005f0 <MX_I2C1_Init+0x74>)
 8000582:	4a1c      	ldr	r2, [pc, #112]	; (80005f4 <MX_I2C1_Init+0x78>)
 8000584:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8000586:	4b1a      	ldr	r3, [pc, #104]	; (80005f0 <MX_I2C1_Init+0x74>)
 8000588:	4a1b      	ldr	r2, [pc, #108]	; (80005f8 <MX_I2C1_Init+0x7c>)
 800058a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800058c:	4b18      	ldr	r3, [pc, #96]	; (80005f0 <MX_I2C1_Init+0x74>)
 800058e:	2200      	movs	r2, #0
 8000590:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000592:	4b17      	ldr	r3, [pc, #92]	; (80005f0 <MX_I2C1_Init+0x74>)
 8000594:	2201      	movs	r2, #1
 8000596:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000598:	4b15      	ldr	r3, [pc, #84]	; (80005f0 <MX_I2C1_Init+0x74>)
 800059a:	2200      	movs	r2, #0
 800059c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800059e:	4b14      	ldr	r3, [pc, #80]	; (80005f0 <MX_I2C1_Init+0x74>)
 80005a0:	2200      	movs	r2, #0
 80005a2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80005a4:	4b12      	ldr	r3, [pc, #72]	; (80005f0 <MX_I2C1_Init+0x74>)
 80005a6:	2200      	movs	r2, #0
 80005a8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80005aa:	4b11      	ldr	r3, [pc, #68]	; (80005f0 <MX_I2C1_Init+0x74>)
 80005ac:	2200      	movs	r2, #0
 80005ae:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80005b0:	4b0f      	ldr	r3, [pc, #60]	; (80005f0 <MX_I2C1_Init+0x74>)
 80005b2:	2200      	movs	r2, #0
 80005b4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80005b6:	480e      	ldr	r0, [pc, #56]	; (80005f0 <MX_I2C1_Init+0x74>)
 80005b8:	f000 fddc 	bl	8001174 <HAL_I2C_Init>
 80005bc:	4603      	mov	r3, r0
 80005be:	2b00      	cmp	r3, #0
 80005c0:	d001      	beq.n	80005c6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80005c2:	f000 f973 	bl	80008ac <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80005c6:	2100      	movs	r1, #0
 80005c8:	4809      	ldr	r0, [pc, #36]	; (80005f0 <MX_I2C1_Init+0x74>)
 80005ca:	f000 fe62 	bl	8001292 <HAL_I2CEx_ConfigAnalogFilter>
 80005ce:	4603      	mov	r3, r0
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	d001      	beq.n	80005d8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80005d4:	f000 f96a 	bl	80008ac <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80005d8:	2100      	movs	r1, #0
 80005da:	4805      	ldr	r0, [pc, #20]	; (80005f0 <MX_I2C1_Init+0x74>)
 80005dc:	f000 fea4 	bl	8001328 <HAL_I2CEx_ConfigDigitalFilter>
 80005e0:	4603      	mov	r3, r0
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d001      	beq.n	80005ea <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80005e6:	f000 f961 	bl	80008ac <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80005ea:	bf00      	nop
 80005ec:	bd80      	pop	{r7, pc}
 80005ee:	bf00      	nop
 80005f0:	20000028 	.word	0x20000028
 80005f4:	40005400 	.word	0x40005400
 80005f8:	2000090e 	.word	0x2000090e

080005fc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000600:	4b1b      	ldr	r3, [pc, #108]	; (8000670 <MX_SPI1_Init+0x74>)
 8000602:	4a1c      	ldr	r2, [pc, #112]	; (8000674 <MX_SPI1_Init+0x78>)
 8000604:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000606:	4b1a      	ldr	r3, [pc, #104]	; (8000670 <MX_SPI1_Init+0x74>)
 8000608:	f44f 7282 	mov.w	r2, #260	; 0x104
 800060c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800060e:	4b18      	ldr	r3, [pc, #96]	; (8000670 <MX_SPI1_Init+0x74>)
 8000610:	2200      	movs	r2, #0
 8000612:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000614:	4b16      	ldr	r3, [pc, #88]	; (8000670 <MX_SPI1_Init+0x74>)
 8000616:	f44f 7240 	mov.w	r2, #768	; 0x300
 800061a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800061c:	4b14      	ldr	r3, [pc, #80]	; (8000670 <MX_SPI1_Init+0x74>)
 800061e:	2200      	movs	r2, #0
 8000620:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000622:	4b13      	ldr	r3, [pc, #76]	; (8000670 <MX_SPI1_Init+0x74>)
 8000624:	2200      	movs	r2, #0
 8000626:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000628:	4b11      	ldr	r3, [pc, #68]	; (8000670 <MX_SPI1_Init+0x74>)
 800062a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800062e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000630:	4b0f      	ldr	r3, [pc, #60]	; (8000670 <MX_SPI1_Init+0x74>)
 8000632:	2208      	movs	r2, #8
 8000634:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000636:	4b0e      	ldr	r3, [pc, #56]	; (8000670 <MX_SPI1_Init+0x74>)
 8000638:	2200      	movs	r2, #0
 800063a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800063c:	4b0c      	ldr	r3, [pc, #48]	; (8000670 <MX_SPI1_Init+0x74>)
 800063e:	2200      	movs	r2, #0
 8000640:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000642:	4b0b      	ldr	r3, [pc, #44]	; (8000670 <MX_SPI1_Init+0x74>)
 8000644:	2200      	movs	r2, #0
 8000646:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000648:	4b09      	ldr	r3, [pc, #36]	; (8000670 <MX_SPI1_Init+0x74>)
 800064a:	2207      	movs	r2, #7
 800064c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800064e:	4b08      	ldr	r3, [pc, #32]	; (8000670 <MX_SPI1_Init+0x74>)
 8000650:	2200      	movs	r2, #0
 8000652:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000654:	4b06      	ldr	r3, [pc, #24]	; (8000670 <MX_SPI1_Init+0x74>)
 8000656:	2208      	movs	r2, #8
 8000658:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800065a:	4805      	ldr	r0, [pc, #20]	; (8000670 <MX_SPI1_Init+0x74>)
 800065c:	f002 fa84 	bl	8002b68 <HAL_SPI_Init>
 8000660:	4603      	mov	r3, r0
 8000662:	2b00      	cmp	r3, #0
 8000664:	d001      	beq.n	800066a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000666:	f000 f921 	bl	80008ac <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800066a:	bf00      	nop
 800066c:	bd80      	pop	{r7, pc}
 800066e:	bf00      	nop
 8000670:	2000007c 	.word	0x2000007c
 8000674:	40013000 	.word	0x40013000

08000678 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b088      	sub	sp, #32
 800067c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800067e:	f107 0310 	add.w	r3, r7, #16
 8000682:	2200      	movs	r2, #0
 8000684:	601a      	str	r2, [r3, #0]
 8000686:	605a      	str	r2, [r3, #4]
 8000688:	609a      	str	r2, [r3, #8]
 800068a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800068c:	1d3b      	adds	r3, r7, #4
 800068e:	2200      	movs	r2, #0
 8000690:	601a      	str	r2, [r3, #0]
 8000692:	605a      	str	r2, [r3, #4]
 8000694:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000696:	4b20      	ldr	r3, [pc, #128]	; (8000718 <MX_TIM1_Init+0xa0>)
 8000698:	4a20      	ldr	r2, [pc, #128]	; (800071c <MX_TIM1_Init+0xa4>)
 800069a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 47;
 800069c:	4b1e      	ldr	r3, [pc, #120]	; (8000718 <MX_TIM1_Init+0xa0>)
 800069e:	222f      	movs	r2, #47	; 0x2f
 80006a0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006a2:	4b1d      	ldr	r3, [pc, #116]	; (8000718 <MX_TIM1_Init+0xa0>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80006a8:	4b1b      	ldr	r3, [pc, #108]	; (8000718 <MX_TIM1_Init+0xa0>)
 80006aa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80006ae:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006b0:	4b19      	ldr	r3, [pc, #100]	; (8000718 <MX_TIM1_Init+0xa0>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80006b6:	4b18      	ldr	r3, [pc, #96]	; (8000718 <MX_TIM1_Init+0xa0>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006bc:	4b16      	ldr	r3, [pc, #88]	; (8000718 <MX_TIM1_Init+0xa0>)
 80006be:	2200      	movs	r2, #0
 80006c0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80006c2:	4815      	ldr	r0, [pc, #84]	; (8000718 <MX_TIM1_Init+0xa0>)
 80006c4:	f002 fafb 	bl	8002cbe <HAL_TIM_Base_Init>
 80006c8:	4603      	mov	r3, r0
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d001      	beq.n	80006d2 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 80006ce:	f000 f8ed 	bl	80008ac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80006d2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006d6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80006d8:	f107 0310 	add.w	r3, r7, #16
 80006dc:	4619      	mov	r1, r3
 80006de:	480e      	ldr	r0, [pc, #56]	; (8000718 <MX_TIM1_Init+0xa0>)
 80006e0:	f002 fba6 	bl	8002e30 <HAL_TIM_ConfigClockSource>
 80006e4:	4603      	mov	r3, r0
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d001      	beq.n	80006ee <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 80006ea:	f000 f8df 	bl	80008ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006ee:	2300      	movs	r3, #0
 80006f0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80006f2:	2300      	movs	r3, #0
 80006f4:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006f6:	2300      	movs	r3, #0
 80006f8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80006fa:	1d3b      	adds	r3, r7, #4
 80006fc:	4619      	mov	r1, r3
 80006fe:	4806      	ldr	r0, [pc, #24]	; (8000718 <MX_TIM1_Init+0xa0>)
 8000700:	f002 fd8a 	bl	8003218 <HAL_TIMEx_MasterConfigSynchronization>
 8000704:	4603      	mov	r3, r0
 8000706:	2b00      	cmp	r3, #0
 8000708:	d001      	beq.n	800070e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800070a:	f000 f8cf 	bl	80008ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800070e:	bf00      	nop
 8000710:	3720      	adds	r7, #32
 8000712:	46bd      	mov	sp, r7
 8000714:	bd80      	pop	{r7, pc}
 8000716:	bf00      	nop
 8000718:	200000e0 	.word	0x200000e0
 800071c:	40012c00 	.word	0x40012c00

08000720 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b084      	sub	sp, #16
 8000724:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000726:	1d3b      	adds	r3, r7, #4
 8000728:	2200      	movs	r2, #0
 800072a:	601a      	str	r2, [r3, #0]
 800072c:	605a      	str	r2, [r3, #4]
 800072e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000730:	4b14      	ldr	r3, [pc, #80]	; (8000784 <MX_TIM6_Init+0x64>)
 8000732:	4a15      	ldr	r2, [pc, #84]	; (8000788 <MX_TIM6_Init+0x68>)
 8000734:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 47;
 8000736:	4b13      	ldr	r3, [pc, #76]	; (8000784 <MX_TIM6_Init+0x64>)
 8000738:	222f      	movs	r2, #47	; 0x2f
 800073a:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800073c:	4b11      	ldr	r3, [pc, #68]	; (8000784 <MX_TIM6_Init+0x64>)
 800073e:	2200      	movs	r2, #0
 8000740:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 0xffff-1;
 8000742:	4b10      	ldr	r3, [pc, #64]	; (8000784 <MX_TIM6_Init+0x64>)
 8000744:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8000748:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800074a:	4b0e      	ldr	r3, [pc, #56]	; (8000784 <MX_TIM6_Init+0x64>)
 800074c:	2200      	movs	r2, #0
 800074e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000750:	480c      	ldr	r0, [pc, #48]	; (8000784 <MX_TIM6_Init+0x64>)
 8000752:	f002 fab4 	bl	8002cbe <HAL_TIM_Base_Init>
 8000756:	4603      	mov	r3, r0
 8000758:	2b00      	cmp	r3, #0
 800075a:	d001      	beq.n	8000760 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 800075c:	f000 f8a6 	bl	80008ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000760:	2300      	movs	r3, #0
 8000762:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000764:	2300      	movs	r3, #0
 8000766:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000768:	1d3b      	adds	r3, r7, #4
 800076a:	4619      	mov	r1, r3
 800076c:	4805      	ldr	r0, [pc, #20]	; (8000784 <MX_TIM6_Init+0x64>)
 800076e:	f002 fd53 	bl	8003218 <HAL_TIMEx_MasterConfigSynchronization>
 8000772:	4603      	mov	r3, r0
 8000774:	2b00      	cmp	r3, #0
 8000776:	d001      	beq.n	800077c <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8000778:	f000 f898 	bl	80008ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800077c:	bf00      	nop
 800077e:	3710      	adds	r7, #16
 8000780:	46bd      	mov	sp, r7
 8000782:	bd80      	pop	{r7, pc}
 8000784:	2000012c 	.word	0x2000012c
 8000788:	40001000 	.word	0x40001000

0800078c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b08a      	sub	sp, #40	; 0x28
 8000790:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000792:	f107 0314 	add.w	r3, r7, #20
 8000796:	2200      	movs	r2, #0
 8000798:	601a      	str	r2, [r3, #0]
 800079a:	605a      	str	r2, [r3, #4]
 800079c:	609a      	str	r2, [r3, #8]
 800079e:	60da      	str	r2, [r3, #12]
 80007a0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80007a2:	4b40      	ldr	r3, [pc, #256]	; (80008a4 <MX_GPIO_Init+0x118>)
 80007a4:	695b      	ldr	r3, [r3, #20]
 80007a6:	4a3f      	ldr	r2, [pc, #252]	; (80008a4 <MX_GPIO_Init+0x118>)
 80007a8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80007ac:	6153      	str	r3, [r2, #20]
 80007ae:	4b3d      	ldr	r3, [pc, #244]	; (80008a4 <MX_GPIO_Init+0x118>)
 80007b0:	695b      	ldr	r3, [r3, #20]
 80007b2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80007b6:	613b      	str	r3, [r7, #16]
 80007b8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007ba:	4b3a      	ldr	r3, [pc, #232]	; (80008a4 <MX_GPIO_Init+0x118>)
 80007bc:	695b      	ldr	r3, [r3, #20]
 80007be:	4a39      	ldr	r2, [pc, #228]	; (80008a4 <MX_GPIO_Init+0x118>)
 80007c0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80007c4:	6153      	str	r3, [r2, #20]
 80007c6:	4b37      	ldr	r3, [pc, #220]	; (80008a4 <MX_GPIO_Init+0x118>)
 80007c8:	695b      	ldr	r3, [r3, #20]
 80007ca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80007ce:	60fb      	str	r3, [r7, #12]
 80007d0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80007d2:	4b34      	ldr	r3, [pc, #208]	; (80008a4 <MX_GPIO_Init+0x118>)
 80007d4:	695b      	ldr	r3, [r3, #20]
 80007d6:	4a33      	ldr	r2, [pc, #204]	; (80008a4 <MX_GPIO_Init+0x118>)
 80007d8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80007dc:	6153      	str	r3, [r2, #20]
 80007de:	4b31      	ldr	r3, [pc, #196]	; (80008a4 <MX_GPIO_Init+0x118>)
 80007e0:	695b      	ldr	r3, [r3, #20]
 80007e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80007e6:	60bb      	str	r3, [r7, #8]
 80007e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ea:	4b2e      	ldr	r3, [pc, #184]	; (80008a4 <MX_GPIO_Init+0x118>)
 80007ec:	695b      	ldr	r3, [r3, #20]
 80007ee:	4a2d      	ldr	r2, [pc, #180]	; (80008a4 <MX_GPIO_Init+0x118>)
 80007f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007f4:	6153      	str	r3, [r2, #20]
 80007f6:	4b2b      	ldr	r3, [pc, #172]	; (80008a4 <MX_GPIO_Init+0x118>)
 80007f8:	695b      	ldr	r3, [r3, #20]
 80007fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80007fe:	607b      	str	r3, [r7, #4]
 8000800:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000802:	4b28      	ldr	r3, [pc, #160]	; (80008a4 <MX_GPIO_Init+0x118>)
 8000804:	695b      	ldr	r3, [r3, #20]
 8000806:	4a27      	ldr	r2, [pc, #156]	; (80008a4 <MX_GPIO_Init+0x118>)
 8000808:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800080c:	6153      	str	r3, [r2, #20]
 800080e:	4b25      	ldr	r3, [pc, #148]	; (80008a4 <MX_GPIO_Init+0x118>)
 8000810:	695b      	ldr	r3, [r3, #20]
 8000812:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000816:	603b      	str	r3, [r7, #0]
 8000818:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 800081a:	2200      	movs	r2, #0
 800081c:	f64f 7108 	movw	r1, #65288	; 0xff08
 8000820:	4821      	ldr	r0, [pc, #132]	; (80008a8 <MX_GPIO_Init+0x11c>)
 8000822:	f000 fc8f 	bl	8001144 <HAL_GPIO_WritePin>
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : DRDY_Pin MEMS_INT3_Pin MEMS_INT4_Pin MEMS_INT1_Pin
                           MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = DRDY_Pin|MEMS_INT3_Pin|MEMS_INT4_Pin|MEMS_INT1_Pin
 8000826:	2337      	movs	r3, #55	; 0x37
 8000828:	617b      	str	r3, [r7, #20]
                          |MEMS_INT2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800082a:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800082e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000830:	2300      	movs	r3, #0
 8000832:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000834:	f107 0314 	add.w	r3, r7, #20
 8000838:	4619      	mov	r1, r3
 800083a:	481b      	ldr	r0, [pc, #108]	; (80008a8 <MX_GPIO_Init+0x11c>)
 800083c:	f000 faf0 	bl	8000e20 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_I2C_SPI_Pin LD4_Pin LD3_Pin LD5_Pin
                           LD7_Pin LD9_Pin LD10_Pin LD8_Pin
                           LD6_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 8000840:	f64f 7308 	movw	r3, #65288	; 0xff08
 8000844:	617b      	str	r3, [r7, #20]
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000846:	2301      	movs	r3, #1
 8000848:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800084a:	2300      	movs	r3, #0
 800084c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800084e:	2300      	movs	r3, #0
 8000850:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000852:	f107 0314 	add.w	r3, r7, #20
 8000856:	4619      	mov	r1, r3
 8000858:	4813      	ldr	r0, [pc, #76]	; (80008a8 <MX_GPIO_Init+0x11c>)
 800085a:	f000 fae1 	bl	8000e20 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800085e:	2301      	movs	r3, #1
 8000860:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000862:	2300      	movs	r3, #0
 8000864:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000866:	2300      	movs	r3, #0
 8000868:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800086a:	f107 0314 	add.w	r3, r7, #20
 800086e:	4619      	mov	r1, r3
 8000870:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000874:	f000 fad4 	bl	8000e20 <HAL_GPIO_Init>

  /*Configure GPIO pins : DM_Pin DP_Pin */
  GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
 8000878:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800087c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800087e:	2302      	movs	r3, #2
 8000880:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000882:	2300      	movs	r3, #0
 8000884:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000886:	2303      	movs	r3, #3
 8000888:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 800088a:	230e      	movs	r3, #14
 800088c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800088e:	f107 0314 	add.w	r3, r7, #20
 8000892:	4619      	mov	r1, r3
 8000894:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000898:	f000 fac2 	bl	8000e20 <HAL_GPIO_Init>

}
 800089c:	bf00      	nop
 800089e:	3728      	adds	r7, #40	; 0x28
 80008a0:	46bd      	mov	sp, r7
 80008a2:	bd80      	pop	{r7, pc}
 80008a4:	40021000 	.word	0x40021000
 80008a8:	48001000 	.word	0x48001000

080008ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008ac:	b480      	push	{r7}
 80008ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008b0:	b672      	cpsid	i
}
 80008b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008b4:	e7fe      	b.n	80008b4 <Error_Handler+0x8>
	...

080008b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b082      	sub	sp, #8
 80008bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008be:	4b0f      	ldr	r3, [pc, #60]	; (80008fc <HAL_MspInit+0x44>)
 80008c0:	699b      	ldr	r3, [r3, #24]
 80008c2:	4a0e      	ldr	r2, [pc, #56]	; (80008fc <HAL_MspInit+0x44>)
 80008c4:	f043 0301 	orr.w	r3, r3, #1
 80008c8:	6193      	str	r3, [r2, #24]
 80008ca:	4b0c      	ldr	r3, [pc, #48]	; (80008fc <HAL_MspInit+0x44>)
 80008cc:	699b      	ldr	r3, [r3, #24]
 80008ce:	f003 0301 	and.w	r3, r3, #1
 80008d2:	607b      	str	r3, [r7, #4]
 80008d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008d6:	4b09      	ldr	r3, [pc, #36]	; (80008fc <HAL_MspInit+0x44>)
 80008d8:	69db      	ldr	r3, [r3, #28]
 80008da:	4a08      	ldr	r2, [pc, #32]	; (80008fc <HAL_MspInit+0x44>)
 80008dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008e0:	61d3      	str	r3, [r2, #28]
 80008e2:	4b06      	ldr	r3, [pc, #24]	; (80008fc <HAL_MspInit+0x44>)
 80008e4:	69db      	ldr	r3, [r3, #28]
 80008e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008ea:	603b      	str	r3, [r7, #0]
 80008ec:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80008ee:	2007      	movs	r0, #7
 80008f0:	f000 fa62 	bl	8000db8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008f4:	bf00      	nop
 80008f6:	3708      	adds	r7, #8
 80008f8:	46bd      	mov	sp, r7
 80008fa:	bd80      	pop	{r7, pc}
 80008fc:	40021000 	.word	0x40021000

08000900 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b08a      	sub	sp, #40	; 0x28
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000908:	f107 0314 	add.w	r3, r7, #20
 800090c:	2200      	movs	r2, #0
 800090e:	601a      	str	r2, [r3, #0]
 8000910:	605a      	str	r2, [r3, #4]
 8000912:	609a      	str	r2, [r3, #8]
 8000914:	60da      	str	r2, [r3, #12]
 8000916:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	4a17      	ldr	r2, [pc, #92]	; (800097c <HAL_I2C_MspInit+0x7c>)
 800091e:	4293      	cmp	r3, r2
 8000920:	d127      	bne.n	8000972 <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000922:	4b17      	ldr	r3, [pc, #92]	; (8000980 <HAL_I2C_MspInit+0x80>)
 8000924:	695b      	ldr	r3, [r3, #20]
 8000926:	4a16      	ldr	r2, [pc, #88]	; (8000980 <HAL_I2C_MspInit+0x80>)
 8000928:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800092c:	6153      	str	r3, [r2, #20]
 800092e:	4b14      	ldr	r3, [pc, #80]	; (8000980 <HAL_I2C_MspInit+0x80>)
 8000930:	695b      	ldr	r3, [r3, #20]
 8000932:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000936:	613b      	str	r3, [r7, #16]
 8000938:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 800093a:	23c0      	movs	r3, #192	; 0xc0
 800093c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800093e:	2312      	movs	r3, #18
 8000940:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000942:	2301      	movs	r3, #1
 8000944:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000946:	2303      	movs	r3, #3
 8000948:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800094a:	2304      	movs	r3, #4
 800094c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800094e:	f107 0314 	add.w	r3, r7, #20
 8000952:	4619      	mov	r1, r3
 8000954:	480b      	ldr	r0, [pc, #44]	; (8000984 <HAL_I2C_MspInit+0x84>)
 8000956:	f000 fa63 	bl	8000e20 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800095a:	4b09      	ldr	r3, [pc, #36]	; (8000980 <HAL_I2C_MspInit+0x80>)
 800095c:	69db      	ldr	r3, [r3, #28]
 800095e:	4a08      	ldr	r2, [pc, #32]	; (8000980 <HAL_I2C_MspInit+0x80>)
 8000960:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000964:	61d3      	str	r3, [r2, #28]
 8000966:	4b06      	ldr	r3, [pc, #24]	; (8000980 <HAL_I2C_MspInit+0x80>)
 8000968:	69db      	ldr	r3, [r3, #28]
 800096a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800096e:	60fb      	str	r3, [r7, #12]
 8000970:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000972:	bf00      	nop
 8000974:	3728      	adds	r7, #40	; 0x28
 8000976:	46bd      	mov	sp, r7
 8000978:	bd80      	pop	{r7, pc}
 800097a:	bf00      	nop
 800097c:	40005400 	.word	0x40005400
 8000980:	40021000 	.word	0x40021000
 8000984:	48000400 	.word	0x48000400

08000988 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b08a      	sub	sp, #40	; 0x28
 800098c:	af00      	add	r7, sp, #0
 800098e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000990:	f107 0314 	add.w	r3, r7, #20
 8000994:	2200      	movs	r2, #0
 8000996:	601a      	str	r2, [r3, #0]
 8000998:	605a      	str	r2, [r3, #4]
 800099a:	609a      	str	r2, [r3, #8]
 800099c:	60da      	str	r2, [r3, #12]
 800099e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	4a17      	ldr	r2, [pc, #92]	; (8000a04 <HAL_SPI_MspInit+0x7c>)
 80009a6:	4293      	cmp	r3, r2
 80009a8:	d128      	bne.n	80009fc <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80009aa:	4b17      	ldr	r3, [pc, #92]	; (8000a08 <HAL_SPI_MspInit+0x80>)
 80009ac:	699b      	ldr	r3, [r3, #24]
 80009ae:	4a16      	ldr	r2, [pc, #88]	; (8000a08 <HAL_SPI_MspInit+0x80>)
 80009b0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80009b4:	6193      	str	r3, [r2, #24]
 80009b6:	4b14      	ldr	r3, [pc, #80]	; (8000a08 <HAL_SPI_MspInit+0x80>)
 80009b8:	699b      	ldr	r3, [r3, #24]
 80009ba:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80009be:	613b      	str	r3, [r7, #16]
 80009c0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009c2:	4b11      	ldr	r3, [pc, #68]	; (8000a08 <HAL_SPI_MspInit+0x80>)
 80009c4:	695b      	ldr	r3, [r3, #20]
 80009c6:	4a10      	ldr	r2, [pc, #64]	; (8000a08 <HAL_SPI_MspInit+0x80>)
 80009c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009cc:	6153      	str	r3, [r2, #20]
 80009ce:	4b0e      	ldr	r3, [pc, #56]	; (8000a08 <HAL_SPI_MspInit+0x80>)
 80009d0:	695b      	ldr	r3, [r3, #20]
 80009d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009d6:	60fb      	str	r3, [r7, #12]
 80009d8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin;
 80009da:	23e0      	movs	r3, #224	; 0xe0
 80009dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009de:	2302      	movs	r3, #2
 80009e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e2:	2300      	movs	r3, #0
 80009e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80009e6:	2303      	movs	r3, #3
 80009e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80009ea:	2305      	movs	r3, #5
 80009ec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009ee:	f107 0314 	add.w	r3, r7, #20
 80009f2:	4619      	mov	r1, r3
 80009f4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009f8:	f000 fa12 	bl	8000e20 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80009fc:	bf00      	nop
 80009fe:	3728      	adds	r7, #40	; 0x28
 8000a00:	46bd      	mov	sp, r7
 8000a02:	bd80      	pop	{r7, pc}
 8000a04:	40013000 	.word	0x40013000
 8000a08:	40021000 	.word	0x40021000

08000a0c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	b085      	sub	sp, #20
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	4a13      	ldr	r2, [pc, #76]	; (8000a68 <HAL_TIM_Base_MspInit+0x5c>)
 8000a1a:	4293      	cmp	r3, r2
 8000a1c:	d10c      	bne.n	8000a38 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000a1e:	4b13      	ldr	r3, [pc, #76]	; (8000a6c <HAL_TIM_Base_MspInit+0x60>)
 8000a20:	699b      	ldr	r3, [r3, #24]
 8000a22:	4a12      	ldr	r2, [pc, #72]	; (8000a6c <HAL_TIM_Base_MspInit+0x60>)
 8000a24:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000a28:	6193      	str	r3, [r2, #24]
 8000a2a:	4b10      	ldr	r3, [pc, #64]	; (8000a6c <HAL_TIM_Base_MspInit+0x60>)
 8000a2c:	699b      	ldr	r3, [r3, #24]
 8000a2e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000a32:	60fb      	str	r3, [r7, #12]
 8000a34:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8000a36:	e010      	b.n	8000a5a <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM6)
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	4a0c      	ldr	r2, [pc, #48]	; (8000a70 <HAL_TIM_Base_MspInit+0x64>)
 8000a3e:	4293      	cmp	r3, r2
 8000a40:	d10b      	bne.n	8000a5a <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000a42:	4b0a      	ldr	r3, [pc, #40]	; (8000a6c <HAL_TIM_Base_MspInit+0x60>)
 8000a44:	69db      	ldr	r3, [r3, #28]
 8000a46:	4a09      	ldr	r2, [pc, #36]	; (8000a6c <HAL_TIM_Base_MspInit+0x60>)
 8000a48:	f043 0310 	orr.w	r3, r3, #16
 8000a4c:	61d3      	str	r3, [r2, #28]
 8000a4e:	4b07      	ldr	r3, [pc, #28]	; (8000a6c <HAL_TIM_Base_MspInit+0x60>)
 8000a50:	69db      	ldr	r3, [r3, #28]
 8000a52:	f003 0310 	and.w	r3, r3, #16
 8000a56:	60bb      	str	r3, [r7, #8]
 8000a58:	68bb      	ldr	r3, [r7, #8]
}
 8000a5a:	bf00      	nop
 8000a5c:	3714      	adds	r7, #20
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a64:	4770      	bx	lr
 8000a66:	bf00      	nop
 8000a68:	40012c00 	.word	0x40012c00
 8000a6c:	40021000 	.word	0x40021000
 8000a70:	40001000 	.word	0x40001000

08000a74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a74:	b480      	push	{r7}
 8000a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a78:	e7fe      	b.n	8000a78 <NMI_Handler+0x4>

08000a7a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a7a:	b480      	push	{r7}
 8000a7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a7e:	e7fe      	b.n	8000a7e <HardFault_Handler+0x4>

08000a80 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a80:	b480      	push	{r7}
 8000a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a84:	e7fe      	b.n	8000a84 <MemManage_Handler+0x4>

08000a86 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a86:	b480      	push	{r7}
 8000a88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a8a:	e7fe      	b.n	8000a8a <BusFault_Handler+0x4>

08000a8c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a90:	e7fe      	b.n	8000a90 <UsageFault_Handler+0x4>

08000a92 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a92:	b480      	push	{r7}
 8000a94:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a96:	bf00      	nop
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9e:	4770      	bx	lr

08000aa0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000aa4:	bf00      	nop
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aac:	4770      	bx	lr

08000aae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000aae:	b480      	push	{r7}
 8000ab0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ab2:	bf00      	nop
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aba:	4770      	bx	lr

08000abc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ac0:	f000 f884 	bl	8000bcc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ac4:	bf00      	nop
 8000ac6:	bd80      	pop	{r7, pc}

08000ac8 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000acc:	4b06      	ldr	r3, [pc, #24]	; (8000ae8 <SystemInit+0x20>)
 8000ace:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ad2:	4a05      	ldr	r2, [pc, #20]	; (8000ae8 <SystemInit+0x20>)
 8000ad4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ad8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000adc:	bf00      	nop
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop
 8000ae8:	e000ed00 	.word	0xe000ed00

08000aec <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000aec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b24 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000af0:	f7ff ffea 	bl	8000ac8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000af4:	480c      	ldr	r0, [pc, #48]	; (8000b28 <LoopForever+0x6>)
  ldr r1, =_edata
 8000af6:	490d      	ldr	r1, [pc, #52]	; (8000b2c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000af8:	4a0d      	ldr	r2, [pc, #52]	; (8000b30 <LoopForever+0xe>)
  movs r3, #0
 8000afa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000afc:	e002      	b.n	8000b04 <LoopCopyDataInit>

08000afe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000afe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b00:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b02:	3304      	adds	r3, #4

08000b04 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b04:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b06:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b08:	d3f9      	bcc.n	8000afe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b0a:	4a0a      	ldr	r2, [pc, #40]	; (8000b34 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b0c:	4c0a      	ldr	r4, [pc, #40]	; (8000b38 <LoopForever+0x16>)
  movs r3, #0
 8000b0e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b10:	e001      	b.n	8000b16 <LoopFillZerobss>

08000b12 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b12:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b14:	3204      	adds	r2, #4

08000b16 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b16:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b18:	d3fb      	bcc.n	8000b12 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b1a:	f002 fbfd 	bl	8003318 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000b1e:	f7ff fc39 	bl	8000394 <main>

08000b22 <LoopForever>:

LoopForever:
    b LoopForever
 8000b22:	e7fe      	b.n	8000b22 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000b24:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8000b28:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b2c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000b30:	080033c0 	.word	0x080033c0
  ldr r2, =_sbss
 8000b34:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000b38:	20000190 	.word	0x20000190

08000b3c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000b3c:	e7fe      	b.n	8000b3c <ADC1_2_IRQHandler>
	...

08000b40 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b44:	4b08      	ldr	r3, [pc, #32]	; (8000b68 <HAL_Init+0x28>)
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	4a07      	ldr	r2, [pc, #28]	; (8000b68 <HAL_Init+0x28>)
 8000b4a:	f043 0310 	orr.w	r3, r3, #16
 8000b4e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b50:	2003      	movs	r0, #3
 8000b52:	f000 f931 	bl	8000db8 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b56:	2000      	movs	r0, #0
 8000b58:	f000 f808 	bl	8000b6c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b5c:	f7ff feac 	bl	80008b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b60:	2300      	movs	r3, #0
}
 8000b62:	4618      	mov	r0, r3
 8000b64:	bd80      	pop	{r7, pc}
 8000b66:	bf00      	nop
 8000b68:	40022000 	.word	0x40022000

08000b6c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b082      	sub	sp, #8
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b74:	4b12      	ldr	r3, [pc, #72]	; (8000bc0 <HAL_InitTick+0x54>)
 8000b76:	681a      	ldr	r2, [r3, #0]
 8000b78:	4b12      	ldr	r3, [pc, #72]	; (8000bc4 <HAL_InitTick+0x58>)
 8000b7a:	781b      	ldrb	r3, [r3, #0]
 8000b7c:	4619      	mov	r1, r3
 8000b7e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b82:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b86:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	f000 f93b 	bl	8000e06 <HAL_SYSTICK_Config>
 8000b90:	4603      	mov	r3, r0
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d001      	beq.n	8000b9a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b96:	2301      	movs	r3, #1
 8000b98:	e00e      	b.n	8000bb8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	2b0f      	cmp	r3, #15
 8000b9e:	d80a      	bhi.n	8000bb6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	6879      	ldr	r1, [r7, #4]
 8000ba4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ba8:	f000 f911 	bl	8000dce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000bac:	4a06      	ldr	r2, [pc, #24]	; (8000bc8 <HAL_InitTick+0x5c>)
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	e000      	b.n	8000bb8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000bb6:	2301      	movs	r3, #1
}
 8000bb8:	4618      	mov	r0, r3
 8000bba:	3708      	adds	r7, #8
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	bd80      	pop	{r7, pc}
 8000bc0:	20000000 	.word	0x20000000
 8000bc4:	20000008 	.word	0x20000008
 8000bc8:	20000004 	.word	0x20000004

08000bcc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000bd0:	4b06      	ldr	r3, [pc, #24]	; (8000bec <HAL_IncTick+0x20>)
 8000bd2:	781b      	ldrb	r3, [r3, #0]
 8000bd4:	461a      	mov	r2, r3
 8000bd6:	4b06      	ldr	r3, [pc, #24]	; (8000bf0 <HAL_IncTick+0x24>)
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	4413      	add	r3, r2
 8000bdc:	4a04      	ldr	r2, [pc, #16]	; (8000bf0 <HAL_IncTick+0x24>)
 8000bde:	6013      	str	r3, [r2, #0]
}
 8000be0:	bf00      	nop
 8000be2:	46bd      	mov	sp, r7
 8000be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be8:	4770      	bx	lr
 8000bea:	bf00      	nop
 8000bec:	20000008 	.word	0x20000008
 8000bf0:	2000018c 	.word	0x2000018c

08000bf4 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	af00      	add	r7, sp, #0
  return uwTick;  
 8000bf8:	4b03      	ldr	r3, [pc, #12]	; (8000c08 <HAL_GetTick+0x14>)
 8000bfa:	681b      	ldr	r3, [r3, #0]
}
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop
 8000c08:	2000018c 	.word	0x2000018c

08000c0c <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b084      	sub	sp, #16
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c14:	f7ff ffee 	bl	8000bf4 <HAL_GetTick>
 8000c18:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c1e:	68fb      	ldr	r3, [r7, #12]
 8000c20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c24:	d005      	beq.n	8000c32 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c26:	4b0a      	ldr	r3, [pc, #40]	; (8000c50 <HAL_Delay+0x44>)
 8000c28:	781b      	ldrb	r3, [r3, #0]
 8000c2a:	461a      	mov	r2, r3
 8000c2c:	68fb      	ldr	r3, [r7, #12]
 8000c2e:	4413      	add	r3, r2
 8000c30:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000c32:	bf00      	nop
 8000c34:	f7ff ffde 	bl	8000bf4 <HAL_GetTick>
 8000c38:	4602      	mov	r2, r0
 8000c3a:	68bb      	ldr	r3, [r7, #8]
 8000c3c:	1ad3      	subs	r3, r2, r3
 8000c3e:	68fa      	ldr	r2, [r7, #12]
 8000c40:	429a      	cmp	r2, r3
 8000c42:	d8f7      	bhi.n	8000c34 <HAL_Delay+0x28>
  {
  }
}
 8000c44:	bf00      	nop
 8000c46:	bf00      	nop
 8000c48:	3710      	adds	r7, #16
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bd80      	pop	{r7, pc}
 8000c4e:	bf00      	nop
 8000c50:	20000008 	.word	0x20000008

08000c54 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c54:	b480      	push	{r7}
 8000c56:	b085      	sub	sp, #20
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	f003 0307 	and.w	r3, r3, #7
 8000c62:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c64:	4b0c      	ldr	r3, [pc, #48]	; (8000c98 <__NVIC_SetPriorityGrouping+0x44>)
 8000c66:	68db      	ldr	r3, [r3, #12]
 8000c68:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c6a:	68ba      	ldr	r2, [r7, #8]
 8000c6c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c70:	4013      	ands	r3, r2
 8000c72:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c74:	68fb      	ldr	r3, [r7, #12]
 8000c76:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c78:	68bb      	ldr	r3, [r7, #8]
 8000c7a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c7c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c84:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c86:	4a04      	ldr	r2, [pc, #16]	; (8000c98 <__NVIC_SetPriorityGrouping+0x44>)
 8000c88:	68bb      	ldr	r3, [r7, #8]
 8000c8a:	60d3      	str	r3, [r2, #12]
}
 8000c8c:	bf00      	nop
 8000c8e:	3714      	adds	r7, #20
 8000c90:	46bd      	mov	sp, r7
 8000c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c96:	4770      	bx	lr
 8000c98:	e000ed00 	.word	0xe000ed00

08000c9c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ca0:	4b04      	ldr	r3, [pc, #16]	; (8000cb4 <__NVIC_GetPriorityGrouping+0x18>)
 8000ca2:	68db      	ldr	r3, [r3, #12]
 8000ca4:	0a1b      	lsrs	r3, r3, #8
 8000ca6:	f003 0307 	and.w	r3, r3, #7
}
 8000caa:	4618      	mov	r0, r3
 8000cac:	46bd      	mov	sp, r7
 8000cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb2:	4770      	bx	lr
 8000cb4:	e000ed00 	.word	0xe000ed00

08000cb8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	b083      	sub	sp, #12
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	6039      	str	r1, [r7, #0]
 8000cc2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	db0a      	blt.n	8000ce2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ccc:	683b      	ldr	r3, [r7, #0]
 8000cce:	b2da      	uxtb	r2, r3
 8000cd0:	490c      	ldr	r1, [pc, #48]	; (8000d04 <__NVIC_SetPriority+0x4c>)
 8000cd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cd6:	0112      	lsls	r2, r2, #4
 8000cd8:	b2d2      	uxtb	r2, r2
 8000cda:	440b      	add	r3, r1
 8000cdc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ce0:	e00a      	b.n	8000cf8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ce2:	683b      	ldr	r3, [r7, #0]
 8000ce4:	b2da      	uxtb	r2, r3
 8000ce6:	4908      	ldr	r1, [pc, #32]	; (8000d08 <__NVIC_SetPriority+0x50>)
 8000ce8:	79fb      	ldrb	r3, [r7, #7]
 8000cea:	f003 030f 	and.w	r3, r3, #15
 8000cee:	3b04      	subs	r3, #4
 8000cf0:	0112      	lsls	r2, r2, #4
 8000cf2:	b2d2      	uxtb	r2, r2
 8000cf4:	440b      	add	r3, r1
 8000cf6:	761a      	strb	r2, [r3, #24]
}
 8000cf8:	bf00      	nop
 8000cfa:	370c      	adds	r7, #12
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d02:	4770      	bx	lr
 8000d04:	e000e100 	.word	0xe000e100
 8000d08:	e000ed00 	.word	0xe000ed00

08000d0c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	b089      	sub	sp, #36	; 0x24
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	60f8      	str	r0, [r7, #12]
 8000d14:	60b9      	str	r1, [r7, #8]
 8000d16:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d18:	68fb      	ldr	r3, [r7, #12]
 8000d1a:	f003 0307 	and.w	r3, r3, #7
 8000d1e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d20:	69fb      	ldr	r3, [r7, #28]
 8000d22:	f1c3 0307 	rsb	r3, r3, #7
 8000d26:	2b04      	cmp	r3, #4
 8000d28:	bf28      	it	cs
 8000d2a:	2304      	movcs	r3, #4
 8000d2c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d2e:	69fb      	ldr	r3, [r7, #28]
 8000d30:	3304      	adds	r3, #4
 8000d32:	2b06      	cmp	r3, #6
 8000d34:	d902      	bls.n	8000d3c <NVIC_EncodePriority+0x30>
 8000d36:	69fb      	ldr	r3, [r7, #28]
 8000d38:	3b03      	subs	r3, #3
 8000d3a:	e000      	b.n	8000d3e <NVIC_EncodePriority+0x32>
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d40:	f04f 32ff 	mov.w	r2, #4294967295
 8000d44:	69bb      	ldr	r3, [r7, #24]
 8000d46:	fa02 f303 	lsl.w	r3, r2, r3
 8000d4a:	43da      	mvns	r2, r3
 8000d4c:	68bb      	ldr	r3, [r7, #8]
 8000d4e:	401a      	ands	r2, r3
 8000d50:	697b      	ldr	r3, [r7, #20]
 8000d52:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d54:	f04f 31ff 	mov.w	r1, #4294967295
 8000d58:	697b      	ldr	r3, [r7, #20]
 8000d5a:	fa01 f303 	lsl.w	r3, r1, r3
 8000d5e:	43d9      	mvns	r1, r3
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d64:	4313      	orrs	r3, r2
         );
}
 8000d66:	4618      	mov	r0, r3
 8000d68:	3724      	adds	r7, #36	; 0x24
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d70:	4770      	bx	lr
	...

08000d74 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b082      	sub	sp, #8
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	3b01      	subs	r3, #1
 8000d80:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d84:	d301      	bcc.n	8000d8a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d86:	2301      	movs	r3, #1
 8000d88:	e00f      	b.n	8000daa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d8a:	4a0a      	ldr	r2, [pc, #40]	; (8000db4 <SysTick_Config+0x40>)
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	3b01      	subs	r3, #1
 8000d90:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d92:	210f      	movs	r1, #15
 8000d94:	f04f 30ff 	mov.w	r0, #4294967295
 8000d98:	f7ff ff8e 	bl	8000cb8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d9c:	4b05      	ldr	r3, [pc, #20]	; (8000db4 <SysTick_Config+0x40>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000da2:	4b04      	ldr	r3, [pc, #16]	; (8000db4 <SysTick_Config+0x40>)
 8000da4:	2207      	movs	r2, #7
 8000da6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000da8:	2300      	movs	r3, #0
}
 8000daa:	4618      	mov	r0, r3
 8000dac:	3708      	adds	r7, #8
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bd80      	pop	{r7, pc}
 8000db2:	bf00      	nop
 8000db4:	e000e010 	.word	0xe000e010

08000db8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b082      	sub	sp, #8
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000dc0:	6878      	ldr	r0, [r7, #4]
 8000dc2:	f7ff ff47 	bl	8000c54 <__NVIC_SetPriorityGrouping>
}
 8000dc6:	bf00      	nop
 8000dc8:	3708      	adds	r7, #8
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bd80      	pop	{r7, pc}

08000dce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000dce:	b580      	push	{r7, lr}
 8000dd0:	b086      	sub	sp, #24
 8000dd2:	af00      	add	r7, sp, #0
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	60b9      	str	r1, [r7, #8]
 8000dd8:	607a      	str	r2, [r7, #4]
 8000dda:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000de0:	f7ff ff5c 	bl	8000c9c <__NVIC_GetPriorityGrouping>
 8000de4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000de6:	687a      	ldr	r2, [r7, #4]
 8000de8:	68b9      	ldr	r1, [r7, #8]
 8000dea:	6978      	ldr	r0, [r7, #20]
 8000dec:	f7ff ff8e 	bl	8000d0c <NVIC_EncodePriority>
 8000df0:	4602      	mov	r2, r0
 8000df2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000df6:	4611      	mov	r1, r2
 8000df8:	4618      	mov	r0, r3
 8000dfa:	f7ff ff5d 	bl	8000cb8 <__NVIC_SetPriority>
}
 8000dfe:	bf00      	nop
 8000e00:	3718      	adds	r7, #24
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bd80      	pop	{r7, pc}

08000e06 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e06:	b580      	push	{r7, lr}
 8000e08:	b082      	sub	sp, #8
 8000e0a:	af00      	add	r7, sp, #0
 8000e0c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e0e:	6878      	ldr	r0, [r7, #4]
 8000e10:	f7ff ffb0 	bl	8000d74 <SysTick_Config>
 8000e14:	4603      	mov	r3, r0
}
 8000e16:	4618      	mov	r0, r3
 8000e18:	3708      	adds	r7, #8
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bd80      	pop	{r7, pc}
	...

08000e20 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e20:	b480      	push	{r7}
 8000e22:	b087      	sub	sp, #28
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
 8000e28:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e2e:	e154      	b.n	80010da <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000e30:	683b      	ldr	r3, [r7, #0]
 8000e32:	681a      	ldr	r2, [r3, #0]
 8000e34:	2101      	movs	r1, #1
 8000e36:	697b      	ldr	r3, [r7, #20]
 8000e38:	fa01 f303 	lsl.w	r3, r1, r3
 8000e3c:	4013      	ands	r3, r2
 8000e3e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000e40:	68fb      	ldr	r3, [r7, #12]
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	f000 8146 	beq.w	80010d4 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000e48:	683b      	ldr	r3, [r7, #0]
 8000e4a:	685b      	ldr	r3, [r3, #4]
 8000e4c:	f003 0303 	and.w	r3, r3, #3
 8000e50:	2b01      	cmp	r3, #1
 8000e52:	d005      	beq.n	8000e60 <HAL_GPIO_Init+0x40>
 8000e54:	683b      	ldr	r3, [r7, #0]
 8000e56:	685b      	ldr	r3, [r3, #4]
 8000e58:	f003 0303 	and.w	r3, r3, #3
 8000e5c:	2b02      	cmp	r3, #2
 8000e5e:	d130      	bne.n	8000ec2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	689b      	ldr	r3, [r3, #8]
 8000e64:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000e66:	697b      	ldr	r3, [r7, #20]
 8000e68:	005b      	lsls	r3, r3, #1
 8000e6a:	2203      	movs	r2, #3
 8000e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e70:	43db      	mvns	r3, r3
 8000e72:	693a      	ldr	r2, [r7, #16]
 8000e74:	4013      	ands	r3, r2
 8000e76:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000e78:	683b      	ldr	r3, [r7, #0]
 8000e7a:	68da      	ldr	r2, [r3, #12]
 8000e7c:	697b      	ldr	r3, [r7, #20]
 8000e7e:	005b      	lsls	r3, r3, #1
 8000e80:	fa02 f303 	lsl.w	r3, r2, r3
 8000e84:	693a      	ldr	r2, [r7, #16]
 8000e86:	4313      	orrs	r3, r2
 8000e88:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	693a      	ldr	r2, [r7, #16]
 8000e8e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	685b      	ldr	r3, [r3, #4]
 8000e94:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e96:	2201      	movs	r2, #1
 8000e98:	697b      	ldr	r3, [r7, #20]
 8000e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e9e:	43db      	mvns	r3, r3
 8000ea0:	693a      	ldr	r2, [r7, #16]
 8000ea2:	4013      	ands	r3, r2
 8000ea4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000ea6:	683b      	ldr	r3, [r7, #0]
 8000ea8:	685b      	ldr	r3, [r3, #4]
 8000eaa:	091b      	lsrs	r3, r3, #4
 8000eac:	f003 0201 	and.w	r2, r3, #1
 8000eb0:	697b      	ldr	r3, [r7, #20]
 8000eb2:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb6:	693a      	ldr	r2, [r7, #16]
 8000eb8:	4313      	orrs	r3, r2
 8000eba:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	693a      	ldr	r2, [r7, #16]
 8000ec0:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ec2:	683b      	ldr	r3, [r7, #0]
 8000ec4:	685b      	ldr	r3, [r3, #4]
 8000ec6:	f003 0303 	and.w	r3, r3, #3
 8000eca:	2b03      	cmp	r3, #3
 8000ecc:	d017      	beq.n	8000efe <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	68db      	ldr	r3, [r3, #12]
 8000ed2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000ed4:	697b      	ldr	r3, [r7, #20]
 8000ed6:	005b      	lsls	r3, r3, #1
 8000ed8:	2203      	movs	r2, #3
 8000eda:	fa02 f303 	lsl.w	r3, r2, r3
 8000ede:	43db      	mvns	r3, r3
 8000ee0:	693a      	ldr	r2, [r7, #16]
 8000ee2:	4013      	ands	r3, r2
 8000ee4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000ee6:	683b      	ldr	r3, [r7, #0]
 8000ee8:	689a      	ldr	r2, [r3, #8]
 8000eea:	697b      	ldr	r3, [r7, #20]
 8000eec:	005b      	lsls	r3, r3, #1
 8000eee:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef2:	693a      	ldr	r2, [r7, #16]
 8000ef4:	4313      	orrs	r3, r2
 8000ef6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	693a      	ldr	r2, [r7, #16]
 8000efc:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000efe:	683b      	ldr	r3, [r7, #0]
 8000f00:	685b      	ldr	r3, [r3, #4]
 8000f02:	f003 0303 	and.w	r3, r3, #3
 8000f06:	2b02      	cmp	r3, #2
 8000f08:	d123      	bne.n	8000f52 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000f0a:	697b      	ldr	r3, [r7, #20]
 8000f0c:	08da      	lsrs	r2, r3, #3
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	3208      	adds	r2, #8
 8000f12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f16:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000f18:	697b      	ldr	r3, [r7, #20]
 8000f1a:	f003 0307 	and.w	r3, r3, #7
 8000f1e:	009b      	lsls	r3, r3, #2
 8000f20:	220f      	movs	r2, #15
 8000f22:	fa02 f303 	lsl.w	r3, r2, r3
 8000f26:	43db      	mvns	r3, r3
 8000f28:	693a      	ldr	r2, [r7, #16]
 8000f2a:	4013      	ands	r3, r2
 8000f2c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000f2e:	683b      	ldr	r3, [r7, #0]
 8000f30:	691a      	ldr	r2, [r3, #16]
 8000f32:	697b      	ldr	r3, [r7, #20]
 8000f34:	f003 0307 	and.w	r3, r3, #7
 8000f38:	009b      	lsls	r3, r3, #2
 8000f3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f3e:	693a      	ldr	r2, [r7, #16]
 8000f40:	4313      	orrs	r3, r2
 8000f42:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000f44:	697b      	ldr	r3, [r7, #20]
 8000f46:	08da      	lsrs	r2, r3, #3
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	3208      	adds	r2, #8
 8000f4c:	6939      	ldr	r1, [r7, #16]
 8000f4e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000f58:	697b      	ldr	r3, [r7, #20]
 8000f5a:	005b      	lsls	r3, r3, #1
 8000f5c:	2203      	movs	r2, #3
 8000f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f62:	43db      	mvns	r3, r3
 8000f64:	693a      	ldr	r2, [r7, #16]
 8000f66:	4013      	ands	r3, r2
 8000f68:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000f6a:	683b      	ldr	r3, [r7, #0]
 8000f6c:	685b      	ldr	r3, [r3, #4]
 8000f6e:	f003 0203 	and.w	r2, r3, #3
 8000f72:	697b      	ldr	r3, [r7, #20]
 8000f74:	005b      	lsls	r3, r3, #1
 8000f76:	fa02 f303 	lsl.w	r3, r2, r3
 8000f7a:	693a      	ldr	r2, [r7, #16]
 8000f7c:	4313      	orrs	r3, r2
 8000f7e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	693a      	ldr	r2, [r7, #16]
 8000f84:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000f86:	683b      	ldr	r3, [r7, #0]
 8000f88:	685b      	ldr	r3, [r3, #4]
 8000f8a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	f000 80a0 	beq.w	80010d4 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f94:	4b58      	ldr	r3, [pc, #352]	; (80010f8 <HAL_GPIO_Init+0x2d8>)
 8000f96:	699b      	ldr	r3, [r3, #24]
 8000f98:	4a57      	ldr	r2, [pc, #348]	; (80010f8 <HAL_GPIO_Init+0x2d8>)
 8000f9a:	f043 0301 	orr.w	r3, r3, #1
 8000f9e:	6193      	str	r3, [r2, #24]
 8000fa0:	4b55      	ldr	r3, [pc, #340]	; (80010f8 <HAL_GPIO_Init+0x2d8>)
 8000fa2:	699b      	ldr	r3, [r3, #24]
 8000fa4:	f003 0301 	and.w	r3, r3, #1
 8000fa8:	60bb      	str	r3, [r7, #8]
 8000faa:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000fac:	4a53      	ldr	r2, [pc, #332]	; (80010fc <HAL_GPIO_Init+0x2dc>)
 8000fae:	697b      	ldr	r3, [r7, #20]
 8000fb0:	089b      	lsrs	r3, r3, #2
 8000fb2:	3302      	adds	r3, #2
 8000fb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fb8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000fba:	697b      	ldr	r3, [r7, #20]
 8000fbc:	f003 0303 	and.w	r3, r3, #3
 8000fc0:	009b      	lsls	r3, r3, #2
 8000fc2:	220f      	movs	r2, #15
 8000fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc8:	43db      	mvns	r3, r3
 8000fca:	693a      	ldr	r2, [r7, #16]
 8000fcc:	4013      	ands	r3, r2
 8000fce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000fd6:	d019      	beq.n	800100c <HAL_GPIO_Init+0x1ec>
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	4a49      	ldr	r2, [pc, #292]	; (8001100 <HAL_GPIO_Init+0x2e0>)
 8000fdc:	4293      	cmp	r3, r2
 8000fde:	d013      	beq.n	8001008 <HAL_GPIO_Init+0x1e8>
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	4a48      	ldr	r2, [pc, #288]	; (8001104 <HAL_GPIO_Init+0x2e4>)
 8000fe4:	4293      	cmp	r3, r2
 8000fe6:	d00d      	beq.n	8001004 <HAL_GPIO_Init+0x1e4>
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	4a47      	ldr	r2, [pc, #284]	; (8001108 <HAL_GPIO_Init+0x2e8>)
 8000fec:	4293      	cmp	r3, r2
 8000fee:	d007      	beq.n	8001000 <HAL_GPIO_Init+0x1e0>
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	4a46      	ldr	r2, [pc, #280]	; (800110c <HAL_GPIO_Init+0x2ec>)
 8000ff4:	4293      	cmp	r3, r2
 8000ff6:	d101      	bne.n	8000ffc <HAL_GPIO_Init+0x1dc>
 8000ff8:	2304      	movs	r3, #4
 8000ffa:	e008      	b.n	800100e <HAL_GPIO_Init+0x1ee>
 8000ffc:	2305      	movs	r3, #5
 8000ffe:	e006      	b.n	800100e <HAL_GPIO_Init+0x1ee>
 8001000:	2303      	movs	r3, #3
 8001002:	e004      	b.n	800100e <HAL_GPIO_Init+0x1ee>
 8001004:	2302      	movs	r3, #2
 8001006:	e002      	b.n	800100e <HAL_GPIO_Init+0x1ee>
 8001008:	2301      	movs	r3, #1
 800100a:	e000      	b.n	800100e <HAL_GPIO_Init+0x1ee>
 800100c:	2300      	movs	r3, #0
 800100e:	697a      	ldr	r2, [r7, #20]
 8001010:	f002 0203 	and.w	r2, r2, #3
 8001014:	0092      	lsls	r2, r2, #2
 8001016:	4093      	lsls	r3, r2
 8001018:	693a      	ldr	r2, [r7, #16]
 800101a:	4313      	orrs	r3, r2
 800101c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800101e:	4937      	ldr	r1, [pc, #220]	; (80010fc <HAL_GPIO_Init+0x2dc>)
 8001020:	697b      	ldr	r3, [r7, #20]
 8001022:	089b      	lsrs	r3, r3, #2
 8001024:	3302      	adds	r3, #2
 8001026:	693a      	ldr	r2, [r7, #16]
 8001028:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800102c:	4b38      	ldr	r3, [pc, #224]	; (8001110 <HAL_GPIO_Init+0x2f0>)
 800102e:	689b      	ldr	r3, [r3, #8]
 8001030:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	43db      	mvns	r3, r3
 8001036:	693a      	ldr	r2, [r7, #16]
 8001038:	4013      	ands	r3, r2
 800103a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	685b      	ldr	r3, [r3, #4]
 8001040:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001044:	2b00      	cmp	r3, #0
 8001046:	d003      	beq.n	8001050 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8001048:	693a      	ldr	r2, [r7, #16]
 800104a:	68fb      	ldr	r3, [r7, #12]
 800104c:	4313      	orrs	r3, r2
 800104e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001050:	4a2f      	ldr	r2, [pc, #188]	; (8001110 <HAL_GPIO_Init+0x2f0>)
 8001052:	693b      	ldr	r3, [r7, #16]
 8001054:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001056:	4b2e      	ldr	r3, [pc, #184]	; (8001110 <HAL_GPIO_Init+0x2f0>)
 8001058:	68db      	ldr	r3, [r3, #12]
 800105a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	43db      	mvns	r3, r3
 8001060:	693a      	ldr	r2, [r7, #16]
 8001062:	4013      	ands	r3, r2
 8001064:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001066:	683b      	ldr	r3, [r7, #0]
 8001068:	685b      	ldr	r3, [r3, #4]
 800106a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800106e:	2b00      	cmp	r3, #0
 8001070:	d003      	beq.n	800107a <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8001072:	693a      	ldr	r2, [r7, #16]
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	4313      	orrs	r3, r2
 8001078:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800107a:	4a25      	ldr	r2, [pc, #148]	; (8001110 <HAL_GPIO_Init+0x2f0>)
 800107c:	693b      	ldr	r3, [r7, #16]
 800107e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001080:	4b23      	ldr	r3, [pc, #140]	; (8001110 <HAL_GPIO_Init+0x2f0>)
 8001082:	685b      	ldr	r3, [r3, #4]
 8001084:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	43db      	mvns	r3, r3
 800108a:	693a      	ldr	r2, [r7, #16]
 800108c:	4013      	ands	r3, r2
 800108e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001090:	683b      	ldr	r3, [r7, #0]
 8001092:	685b      	ldr	r3, [r3, #4]
 8001094:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001098:	2b00      	cmp	r3, #0
 800109a:	d003      	beq.n	80010a4 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 800109c:	693a      	ldr	r2, [r7, #16]
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	4313      	orrs	r3, r2
 80010a2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80010a4:	4a1a      	ldr	r2, [pc, #104]	; (8001110 <HAL_GPIO_Init+0x2f0>)
 80010a6:	693b      	ldr	r3, [r7, #16]
 80010a8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80010aa:	4b19      	ldr	r3, [pc, #100]	; (8001110 <HAL_GPIO_Init+0x2f0>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	43db      	mvns	r3, r3
 80010b4:	693a      	ldr	r2, [r7, #16]
 80010b6:	4013      	ands	r3, r2
 80010b8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80010ba:	683b      	ldr	r3, [r7, #0]
 80010bc:	685b      	ldr	r3, [r3, #4]
 80010be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d003      	beq.n	80010ce <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80010c6:	693a      	ldr	r2, [r7, #16]
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	4313      	orrs	r3, r2
 80010cc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80010ce:	4a10      	ldr	r2, [pc, #64]	; (8001110 <HAL_GPIO_Init+0x2f0>)
 80010d0:	693b      	ldr	r3, [r7, #16]
 80010d2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80010d4:	697b      	ldr	r3, [r7, #20]
 80010d6:	3301      	adds	r3, #1
 80010d8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010da:	683b      	ldr	r3, [r7, #0]
 80010dc:	681a      	ldr	r2, [r3, #0]
 80010de:	697b      	ldr	r3, [r7, #20]
 80010e0:	fa22 f303 	lsr.w	r3, r2, r3
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	f47f aea3 	bne.w	8000e30 <HAL_GPIO_Init+0x10>
  }
}
 80010ea:	bf00      	nop
 80010ec:	bf00      	nop
 80010ee:	371c      	adds	r7, #28
 80010f0:	46bd      	mov	sp, r7
 80010f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f6:	4770      	bx	lr
 80010f8:	40021000 	.word	0x40021000
 80010fc:	40010000 	.word	0x40010000
 8001100:	48000400 	.word	0x48000400
 8001104:	48000800 	.word	0x48000800
 8001108:	48000c00 	.word	0x48000c00
 800110c:	48001000 	.word	0x48001000
 8001110:	40010400 	.word	0x40010400

08001114 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001114:	b480      	push	{r7}
 8001116:	b085      	sub	sp, #20
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
 800111c:	460b      	mov	r3, r1
 800111e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	691a      	ldr	r2, [r3, #16]
 8001124:	887b      	ldrh	r3, [r7, #2]
 8001126:	4013      	ands	r3, r2
 8001128:	2b00      	cmp	r3, #0
 800112a:	d002      	beq.n	8001132 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800112c:	2301      	movs	r3, #1
 800112e:	73fb      	strb	r3, [r7, #15]
 8001130:	e001      	b.n	8001136 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001132:	2300      	movs	r3, #0
 8001134:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001136:	7bfb      	ldrb	r3, [r7, #15]
}
 8001138:	4618      	mov	r0, r3
 800113a:	3714      	adds	r7, #20
 800113c:	46bd      	mov	sp, r7
 800113e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001142:	4770      	bx	lr

08001144 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001144:	b480      	push	{r7}
 8001146:	b083      	sub	sp, #12
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
 800114c:	460b      	mov	r3, r1
 800114e:	807b      	strh	r3, [r7, #2]
 8001150:	4613      	mov	r3, r2
 8001152:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001154:	787b      	ldrb	r3, [r7, #1]
 8001156:	2b00      	cmp	r3, #0
 8001158:	d003      	beq.n	8001162 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800115a:	887a      	ldrh	r2, [r7, #2]
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001160:	e002      	b.n	8001168 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001162:	887a      	ldrh	r2, [r7, #2]
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001168:	bf00      	nop
 800116a:	370c      	adds	r7, #12
 800116c:	46bd      	mov	sp, r7
 800116e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001172:	4770      	bx	lr

08001174 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b082      	sub	sp, #8
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	2b00      	cmp	r3, #0
 8001180:	d101      	bne.n	8001186 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001182:	2301      	movs	r3, #1
 8001184:	e081      	b.n	800128a <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800118c:	b2db      	uxtb	r3, r3
 800118e:	2b00      	cmp	r3, #0
 8001190:	d106      	bne.n	80011a0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	2200      	movs	r2, #0
 8001196:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800119a:	6878      	ldr	r0, [r7, #4]
 800119c:	f7ff fbb0 	bl	8000900 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	2224      	movs	r2, #36	; 0x24
 80011a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	681a      	ldr	r2, [r3, #0]
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	f022 0201 	bic.w	r2, r2, #1
 80011b6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	685a      	ldr	r2, [r3, #4]
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80011c4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	689a      	ldr	r2, [r3, #8]
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80011d4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	68db      	ldr	r3, [r3, #12]
 80011da:	2b01      	cmp	r3, #1
 80011dc:	d107      	bne.n	80011ee <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	689a      	ldr	r2, [r3, #8]
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80011ea:	609a      	str	r2, [r3, #8]
 80011ec:	e006      	b.n	80011fc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	689a      	ldr	r2, [r3, #8]
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80011fa:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	68db      	ldr	r3, [r3, #12]
 8001200:	2b02      	cmp	r3, #2
 8001202:	d104      	bne.n	800120e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800120c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	685b      	ldr	r3, [r3, #4]
 8001214:	687a      	ldr	r2, [r7, #4]
 8001216:	6812      	ldr	r2, [r2, #0]
 8001218:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800121c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001220:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	68da      	ldr	r2, [r3, #12]
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001230:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	691a      	ldr	r2, [r3, #16]
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	695b      	ldr	r3, [r3, #20]
 800123a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	699b      	ldr	r3, [r3, #24]
 8001242:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	430a      	orrs	r2, r1
 800124a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	69d9      	ldr	r1, [r3, #28]
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	6a1a      	ldr	r2, [r3, #32]
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	430a      	orrs	r2, r1
 800125a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	681a      	ldr	r2, [r3, #0]
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	f042 0201 	orr.w	r2, r2, #1
 800126a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	2200      	movs	r2, #0
 8001270:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	2220      	movs	r2, #32
 8001276:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	2200      	movs	r2, #0
 800127e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	2200      	movs	r2, #0
 8001284:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001288:	2300      	movs	r3, #0
}
 800128a:	4618      	mov	r0, r3
 800128c:	3708      	adds	r7, #8
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}

08001292 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001292:	b480      	push	{r7}
 8001294:	b083      	sub	sp, #12
 8001296:	af00      	add	r7, sp, #0
 8001298:	6078      	str	r0, [r7, #4]
 800129a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80012a2:	b2db      	uxtb	r3, r3
 80012a4:	2b20      	cmp	r3, #32
 80012a6:	d138      	bne.n	800131a <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80012ae:	2b01      	cmp	r3, #1
 80012b0:	d101      	bne.n	80012b6 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80012b2:	2302      	movs	r3, #2
 80012b4:	e032      	b.n	800131c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	2201      	movs	r2, #1
 80012ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	2224      	movs	r2, #36	; 0x24
 80012c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	681a      	ldr	r2, [r3, #0]
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	f022 0201 	bic.w	r2, r2, #1
 80012d4:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	681a      	ldr	r2, [r3, #0]
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80012e4:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	6819      	ldr	r1, [r3, #0]
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	683a      	ldr	r2, [r7, #0]
 80012f2:	430a      	orrs	r2, r1
 80012f4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	681a      	ldr	r2, [r3, #0]
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	f042 0201 	orr.w	r2, r2, #1
 8001304:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	2220      	movs	r2, #32
 800130a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	2200      	movs	r2, #0
 8001312:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001316:	2300      	movs	r3, #0
 8001318:	e000      	b.n	800131c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800131a:	2302      	movs	r3, #2
  }
}
 800131c:	4618      	mov	r0, r3
 800131e:	370c      	adds	r7, #12
 8001320:	46bd      	mov	sp, r7
 8001322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001326:	4770      	bx	lr

08001328 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001328:	b480      	push	{r7}
 800132a:	b085      	sub	sp, #20
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
 8001330:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001338:	b2db      	uxtb	r3, r3
 800133a:	2b20      	cmp	r3, #32
 800133c:	d139      	bne.n	80013b2 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001344:	2b01      	cmp	r3, #1
 8001346:	d101      	bne.n	800134c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001348:	2302      	movs	r3, #2
 800134a:	e033      	b.n	80013b4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	2201      	movs	r2, #1
 8001350:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	2224      	movs	r2, #36	; 0x24
 8001358:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	681a      	ldr	r2, [r3, #0]
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	f022 0201 	bic.w	r2, r2, #1
 800136a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800137a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800137c:	683b      	ldr	r3, [r7, #0]
 800137e:	021b      	lsls	r3, r3, #8
 8001380:	68fa      	ldr	r2, [r7, #12]
 8001382:	4313      	orrs	r3, r2
 8001384:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	68fa      	ldr	r2, [r7, #12]
 800138c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	681a      	ldr	r2, [r3, #0]
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	f042 0201 	orr.w	r2, r2, #1
 800139c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	2220      	movs	r2, #32
 80013a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	2200      	movs	r2, #0
 80013aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80013ae:	2300      	movs	r3, #0
 80013b0:	e000      	b.n	80013b4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80013b2:	2302      	movs	r3, #2
  }
}
 80013b4:	4618      	mov	r0, r3
 80013b6:	3714      	adds	r7, #20
 80013b8:	46bd      	mov	sp, r7
 80013ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013be:	4770      	bx	lr

080013c0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 80013c6:	af00      	add	r7, sp, #0
 80013c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80013cc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80013d0:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80013d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80013d6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d102      	bne.n	80013e6 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 80013e0:	2301      	movs	r3, #1
 80013e2:	f001 b823 	b.w	800242c <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80013e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80013ea:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	f003 0301 	and.w	r3, r3, #1
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	f000 817d 	beq.w	80016f6 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80013fc:	4bbc      	ldr	r3, [pc, #752]	; (80016f0 <HAL_RCC_OscConfig+0x330>)
 80013fe:	685b      	ldr	r3, [r3, #4]
 8001400:	f003 030c 	and.w	r3, r3, #12
 8001404:	2b04      	cmp	r3, #4
 8001406:	d00c      	beq.n	8001422 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001408:	4bb9      	ldr	r3, [pc, #740]	; (80016f0 <HAL_RCC_OscConfig+0x330>)
 800140a:	685b      	ldr	r3, [r3, #4]
 800140c:	f003 030c 	and.w	r3, r3, #12
 8001410:	2b08      	cmp	r3, #8
 8001412:	d15c      	bne.n	80014ce <HAL_RCC_OscConfig+0x10e>
 8001414:	4bb6      	ldr	r3, [pc, #728]	; (80016f0 <HAL_RCC_OscConfig+0x330>)
 8001416:	685b      	ldr	r3, [r3, #4]
 8001418:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800141c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001420:	d155      	bne.n	80014ce <HAL_RCC_OscConfig+0x10e>
 8001422:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001426:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800142a:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800142e:	fa93 f3a3 	rbit	r3, r3
 8001432:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001436:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800143a:	fab3 f383 	clz	r3, r3
 800143e:	b2db      	uxtb	r3, r3
 8001440:	095b      	lsrs	r3, r3, #5
 8001442:	b2db      	uxtb	r3, r3
 8001444:	f043 0301 	orr.w	r3, r3, #1
 8001448:	b2db      	uxtb	r3, r3
 800144a:	2b01      	cmp	r3, #1
 800144c:	d102      	bne.n	8001454 <HAL_RCC_OscConfig+0x94>
 800144e:	4ba8      	ldr	r3, [pc, #672]	; (80016f0 <HAL_RCC_OscConfig+0x330>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	e015      	b.n	8001480 <HAL_RCC_OscConfig+0xc0>
 8001454:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001458:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800145c:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8001460:	fa93 f3a3 	rbit	r3, r3
 8001464:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001468:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800146c:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001470:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8001474:	fa93 f3a3 	rbit	r3, r3
 8001478:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 800147c:	4b9c      	ldr	r3, [pc, #624]	; (80016f0 <HAL_RCC_OscConfig+0x330>)
 800147e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001480:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001484:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8001488:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 800148c:	fa92 f2a2 	rbit	r2, r2
 8001490:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8001494:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8001498:	fab2 f282 	clz	r2, r2
 800149c:	b2d2      	uxtb	r2, r2
 800149e:	f042 0220 	orr.w	r2, r2, #32
 80014a2:	b2d2      	uxtb	r2, r2
 80014a4:	f002 021f 	and.w	r2, r2, #31
 80014a8:	2101      	movs	r1, #1
 80014aa:	fa01 f202 	lsl.w	r2, r1, r2
 80014ae:	4013      	ands	r3, r2
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	f000 811f 	beq.w	80016f4 <HAL_RCC_OscConfig+0x334>
 80014b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014ba:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	685b      	ldr	r3, [r3, #4]
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	f040 8116 	bne.w	80016f4 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 80014c8:	2301      	movs	r3, #1
 80014ca:	f000 bfaf 	b.w	800242c <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80014ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014d2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	685b      	ldr	r3, [r3, #4]
 80014da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80014de:	d106      	bne.n	80014ee <HAL_RCC_OscConfig+0x12e>
 80014e0:	4b83      	ldr	r3, [pc, #524]	; (80016f0 <HAL_RCC_OscConfig+0x330>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	4a82      	ldr	r2, [pc, #520]	; (80016f0 <HAL_RCC_OscConfig+0x330>)
 80014e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014ea:	6013      	str	r3, [r2, #0]
 80014ec:	e036      	b.n	800155c <HAL_RCC_OscConfig+0x19c>
 80014ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014f2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	685b      	ldr	r3, [r3, #4]
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d10c      	bne.n	8001518 <HAL_RCC_OscConfig+0x158>
 80014fe:	4b7c      	ldr	r3, [pc, #496]	; (80016f0 <HAL_RCC_OscConfig+0x330>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	4a7b      	ldr	r2, [pc, #492]	; (80016f0 <HAL_RCC_OscConfig+0x330>)
 8001504:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001508:	6013      	str	r3, [r2, #0]
 800150a:	4b79      	ldr	r3, [pc, #484]	; (80016f0 <HAL_RCC_OscConfig+0x330>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	4a78      	ldr	r2, [pc, #480]	; (80016f0 <HAL_RCC_OscConfig+0x330>)
 8001510:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001514:	6013      	str	r3, [r2, #0]
 8001516:	e021      	b.n	800155c <HAL_RCC_OscConfig+0x19c>
 8001518:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800151c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	685b      	ldr	r3, [r3, #4]
 8001524:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001528:	d10c      	bne.n	8001544 <HAL_RCC_OscConfig+0x184>
 800152a:	4b71      	ldr	r3, [pc, #452]	; (80016f0 <HAL_RCC_OscConfig+0x330>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	4a70      	ldr	r2, [pc, #448]	; (80016f0 <HAL_RCC_OscConfig+0x330>)
 8001530:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001534:	6013      	str	r3, [r2, #0]
 8001536:	4b6e      	ldr	r3, [pc, #440]	; (80016f0 <HAL_RCC_OscConfig+0x330>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	4a6d      	ldr	r2, [pc, #436]	; (80016f0 <HAL_RCC_OscConfig+0x330>)
 800153c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001540:	6013      	str	r3, [r2, #0]
 8001542:	e00b      	b.n	800155c <HAL_RCC_OscConfig+0x19c>
 8001544:	4b6a      	ldr	r3, [pc, #424]	; (80016f0 <HAL_RCC_OscConfig+0x330>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	4a69      	ldr	r2, [pc, #420]	; (80016f0 <HAL_RCC_OscConfig+0x330>)
 800154a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800154e:	6013      	str	r3, [r2, #0]
 8001550:	4b67      	ldr	r3, [pc, #412]	; (80016f0 <HAL_RCC_OscConfig+0x330>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	4a66      	ldr	r2, [pc, #408]	; (80016f0 <HAL_RCC_OscConfig+0x330>)
 8001556:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800155a:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800155c:	4b64      	ldr	r3, [pc, #400]	; (80016f0 <HAL_RCC_OscConfig+0x330>)
 800155e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001560:	f023 020f 	bic.w	r2, r3, #15
 8001564:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001568:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	689b      	ldr	r3, [r3, #8]
 8001570:	495f      	ldr	r1, [pc, #380]	; (80016f0 <HAL_RCC_OscConfig+0x330>)
 8001572:	4313      	orrs	r3, r2
 8001574:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001576:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800157a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	685b      	ldr	r3, [r3, #4]
 8001582:	2b00      	cmp	r3, #0
 8001584:	d059      	beq.n	800163a <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001586:	f7ff fb35 	bl	8000bf4 <HAL_GetTick>
 800158a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800158e:	e00a      	b.n	80015a6 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001590:	f7ff fb30 	bl	8000bf4 <HAL_GetTick>
 8001594:	4602      	mov	r2, r0
 8001596:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800159a:	1ad3      	subs	r3, r2, r3
 800159c:	2b64      	cmp	r3, #100	; 0x64
 800159e:	d902      	bls.n	80015a6 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 80015a0:	2303      	movs	r3, #3
 80015a2:	f000 bf43 	b.w	800242c <HAL_RCC_OscConfig+0x106c>
 80015a6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80015aa:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015ae:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80015b2:	fa93 f3a3 	rbit	r3, r3
 80015b6:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 80015ba:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015be:	fab3 f383 	clz	r3, r3
 80015c2:	b2db      	uxtb	r3, r3
 80015c4:	095b      	lsrs	r3, r3, #5
 80015c6:	b2db      	uxtb	r3, r3
 80015c8:	f043 0301 	orr.w	r3, r3, #1
 80015cc:	b2db      	uxtb	r3, r3
 80015ce:	2b01      	cmp	r3, #1
 80015d0:	d102      	bne.n	80015d8 <HAL_RCC_OscConfig+0x218>
 80015d2:	4b47      	ldr	r3, [pc, #284]	; (80016f0 <HAL_RCC_OscConfig+0x330>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	e015      	b.n	8001604 <HAL_RCC_OscConfig+0x244>
 80015d8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80015dc:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015e0:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80015e4:	fa93 f3a3 	rbit	r3, r3
 80015e8:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80015ec:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80015f0:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80015f4:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80015f8:	fa93 f3a3 	rbit	r3, r3
 80015fc:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8001600:	4b3b      	ldr	r3, [pc, #236]	; (80016f0 <HAL_RCC_OscConfig+0x330>)
 8001602:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001604:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001608:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 800160c:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001610:	fa92 f2a2 	rbit	r2, r2
 8001614:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8001618:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 800161c:	fab2 f282 	clz	r2, r2
 8001620:	b2d2      	uxtb	r2, r2
 8001622:	f042 0220 	orr.w	r2, r2, #32
 8001626:	b2d2      	uxtb	r2, r2
 8001628:	f002 021f 	and.w	r2, r2, #31
 800162c:	2101      	movs	r1, #1
 800162e:	fa01 f202 	lsl.w	r2, r1, r2
 8001632:	4013      	ands	r3, r2
 8001634:	2b00      	cmp	r3, #0
 8001636:	d0ab      	beq.n	8001590 <HAL_RCC_OscConfig+0x1d0>
 8001638:	e05d      	b.n	80016f6 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800163a:	f7ff fadb 	bl	8000bf4 <HAL_GetTick>
 800163e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001642:	e00a      	b.n	800165a <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001644:	f7ff fad6 	bl	8000bf4 <HAL_GetTick>
 8001648:	4602      	mov	r2, r0
 800164a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800164e:	1ad3      	subs	r3, r2, r3
 8001650:	2b64      	cmp	r3, #100	; 0x64
 8001652:	d902      	bls.n	800165a <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8001654:	2303      	movs	r3, #3
 8001656:	f000 bee9 	b.w	800242c <HAL_RCC_OscConfig+0x106c>
 800165a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800165e:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001662:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8001666:	fa93 f3a3 	rbit	r3, r3
 800166a:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 800166e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001672:	fab3 f383 	clz	r3, r3
 8001676:	b2db      	uxtb	r3, r3
 8001678:	095b      	lsrs	r3, r3, #5
 800167a:	b2db      	uxtb	r3, r3
 800167c:	f043 0301 	orr.w	r3, r3, #1
 8001680:	b2db      	uxtb	r3, r3
 8001682:	2b01      	cmp	r3, #1
 8001684:	d102      	bne.n	800168c <HAL_RCC_OscConfig+0x2cc>
 8001686:	4b1a      	ldr	r3, [pc, #104]	; (80016f0 <HAL_RCC_OscConfig+0x330>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	e015      	b.n	80016b8 <HAL_RCC_OscConfig+0x2f8>
 800168c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001690:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001694:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8001698:	fa93 f3a3 	rbit	r3, r3
 800169c:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80016a0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80016a4:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80016a8:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80016ac:	fa93 f3a3 	rbit	r3, r3
 80016b0:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 80016b4:	4b0e      	ldr	r3, [pc, #56]	; (80016f0 <HAL_RCC_OscConfig+0x330>)
 80016b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016b8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80016bc:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 80016c0:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80016c4:	fa92 f2a2 	rbit	r2, r2
 80016c8:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 80016cc:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 80016d0:	fab2 f282 	clz	r2, r2
 80016d4:	b2d2      	uxtb	r2, r2
 80016d6:	f042 0220 	orr.w	r2, r2, #32
 80016da:	b2d2      	uxtb	r2, r2
 80016dc:	f002 021f 	and.w	r2, r2, #31
 80016e0:	2101      	movs	r1, #1
 80016e2:	fa01 f202 	lsl.w	r2, r1, r2
 80016e6:	4013      	ands	r3, r2
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d1ab      	bne.n	8001644 <HAL_RCC_OscConfig+0x284>
 80016ec:	e003      	b.n	80016f6 <HAL_RCC_OscConfig+0x336>
 80016ee:	bf00      	nop
 80016f0:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80016f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016fa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f003 0302 	and.w	r3, r3, #2
 8001706:	2b00      	cmp	r3, #0
 8001708:	f000 817d 	beq.w	8001a06 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800170c:	4ba6      	ldr	r3, [pc, #664]	; (80019a8 <HAL_RCC_OscConfig+0x5e8>)
 800170e:	685b      	ldr	r3, [r3, #4]
 8001710:	f003 030c 	and.w	r3, r3, #12
 8001714:	2b00      	cmp	r3, #0
 8001716:	d00b      	beq.n	8001730 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001718:	4ba3      	ldr	r3, [pc, #652]	; (80019a8 <HAL_RCC_OscConfig+0x5e8>)
 800171a:	685b      	ldr	r3, [r3, #4]
 800171c:	f003 030c 	and.w	r3, r3, #12
 8001720:	2b08      	cmp	r3, #8
 8001722:	d172      	bne.n	800180a <HAL_RCC_OscConfig+0x44a>
 8001724:	4ba0      	ldr	r3, [pc, #640]	; (80019a8 <HAL_RCC_OscConfig+0x5e8>)
 8001726:	685b      	ldr	r3, [r3, #4]
 8001728:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800172c:	2b00      	cmp	r3, #0
 800172e:	d16c      	bne.n	800180a <HAL_RCC_OscConfig+0x44a>
 8001730:	2302      	movs	r3, #2
 8001732:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001736:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800173a:	fa93 f3a3 	rbit	r3, r3
 800173e:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8001742:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001746:	fab3 f383 	clz	r3, r3
 800174a:	b2db      	uxtb	r3, r3
 800174c:	095b      	lsrs	r3, r3, #5
 800174e:	b2db      	uxtb	r3, r3
 8001750:	f043 0301 	orr.w	r3, r3, #1
 8001754:	b2db      	uxtb	r3, r3
 8001756:	2b01      	cmp	r3, #1
 8001758:	d102      	bne.n	8001760 <HAL_RCC_OscConfig+0x3a0>
 800175a:	4b93      	ldr	r3, [pc, #588]	; (80019a8 <HAL_RCC_OscConfig+0x5e8>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	e013      	b.n	8001788 <HAL_RCC_OscConfig+0x3c8>
 8001760:	2302      	movs	r3, #2
 8001762:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001766:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 800176a:	fa93 f3a3 	rbit	r3, r3
 800176e:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001772:	2302      	movs	r3, #2
 8001774:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001778:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800177c:	fa93 f3a3 	rbit	r3, r3
 8001780:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8001784:	4b88      	ldr	r3, [pc, #544]	; (80019a8 <HAL_RCC_OscConfig+0x5e8>)
 8001786:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001788:	2202      	movs	r2, #2
 800178a:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 800178e:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001792:	fa92 f2a2 	rbit	r2, r2
 8001796:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 800179a:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 800179e:	fab2 f282 	clz	r2, r2
 80017a2:	b2d2      	uxtb	r2, r2
 80017a4:	f042 0220 	orr.w	r2, r2, #32
 80017a8:	b2d2      	uxtb	r2, r2
 80017aa:	f002 021f 	and.w	r2, r2, #31
 80017ae:	2101      	movs	r1, #1
 80017b0:	fa01 f202 	lsl.w	r2, r1, r2
 80017b4:	4013      	ands	r3, r2
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d00a      	beq.n	80017d0 <HAL_RCC_OscConfig+0x410>
 80017ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017be:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	691b      	ldr	r3, [r3, #16]
 80017c6:	2b01      	cmp	r3, #1
 80017c8:	d002      	beq.n	80017d0 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 80017ca:	2301      	movs	r3, #1
 80017cc:	f000 be2e 	b.w	800242c <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017d0:	4b75      	ldr	r3, [pc, #468]	; (80019a8 <HAL_RCC_OscConfig+0x5e8>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80017d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017dc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	695b      	ldr	r3, [r3, #20]
 80017e4:	21f8      	movs	r1, #248	; 0xf8
 80017e6:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017ea:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80017ee:	fa91 f1a1 	rbit	r1, r1
 80017f2:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 80017f6:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 80017fa:	fab1 f181 	clz	r1, r1
 80017fe:	b2c9      	uxtb	r1, r1
 8001800:	408b      	lsls	r3, r1
 8001802:	4969      	ldr	r1, [pc, #420]	; (80019a8 <HAL_RCC_OscConfig+0x5e8>)
 8001804:	4313      	orrs	r3, r2
 8001806:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001808:	e0fd      	b.n	8001a06 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800180a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800180e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	691b      	ldr	r3, [r3, #16]
 8001816:	2b00      	cmp	r3, #0
 8001818:	f000 8088 	beq.w	800192c <HAL_RCC_OscConfig+0x56c>
 800181c:	2301      	movs	r3, #1
 800181e:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001822:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8001826:	fa93 f3a3 	rbit	r3, r3
 800182a:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 800182e:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001832:	fab3 f383 	clz	r3, r3
 8001836:	b2db      	uxtb	r3, r3
 8001838:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800183c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001840:	009b      	lsls	r3, r3, #2
 8001842:	461a      	mov	r2, r3
 8001844:	2301      	movs	r3, #1
 8001846:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001848:	f7ff f9d4 	bl	8000bf4 <HAL_GetTick>
 800184c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001850:	e00a      	b.n	8001868 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001852:	f7ff f9cf 	bl	8000bf4 <HAL_GetTick>
 8001856:	4602      	mov	r2, r0
 8001858:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800185c:	1ad3      	subs	r3, r2, r3
 800185e:	2b02      	cmp	r3, #2
 8001860:	d902      	bls.n	8001868 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8001862:	2303      	movs	r3, #3
 8001864:	f000 bde2 	b.w	800242c <HAL_RCC_OscConfig+0x106c>
 8001868:	2302      	movs	r3, #2
 800186a:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800186e:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8001872:	fa93 f3a3 	rbit	r3, r3
 8001876:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 800187a:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800187e:	fab3 f383 	clz	r3, r3
 8001882:	b2db      	uxtb	r3, r3
 8001884:	095b      	lsrs	r3, r3, #5
 8001886:	b2db      	uxtb	r3, r3
 8001888:	f043 0301 	orr.w	r3, r3, #1
 800188c:	b2db      	uxtb	r3, r3
 800188e:	2b01      	cmp	r3, #1
 8001890:	d102      	bne.n	8001898 <HAL_RCC_OscConfig+0x4d8>
 8001892:	4b45      	ldr	r3, [pc, #276]	; (80019a8 <HAL_RCC_OscConfig+0x5e8>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	e013      	b.n	80018c0 <HAL_RCC_OscConfig+0x500>
 8001898:	2302      	movs	r3, #2
 800189a:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800189e:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80018a2:	fa93 f3a3 	rbit	r3, r3
 80018a6:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80018aa:	2302      	movs	r3, #2
 80018ac:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80018b0:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80018b4:	fa93 f3a3 	rbit	r3, r3
 80018b8:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 80018bc:	4b3a      	ldr	r3, [pc, #232]	; (80019a8 <HAL_RCC_OscConfig+0x5e8>)
 80018be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018c0:	2202      	movs	r2, #2
 80018c2:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 80018c6:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80018ca:	fa92 f2a2 	rbit	r2, r2
 80018ce:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 80018d2:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80018d6:	fab2 f282 	clz	r2, r2
 80018da:	b2d2      	uxtb	r2, r2
 80018dc:	f042 0220 	orr.w	r2, r2, #32
 80018e0:	b2d2      	uxtb	r2, r2
 80018e2:	f002 021f 	and.w	r2, r2, #31
 80018e6:	2101      	movs	r1, #1
 80018e8:	fa01 f202 	lsl.w	r2, r1, r2
 80018ec:	4013      	ands	r3, r2
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d0af      	beq.n	8001852 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018f2:	4b2d      	ldr	r3, [pc, #180]	; (80019a8 <HAL_RCC_OscConfig+0x5e8>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80018fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018fe:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	695b      	ldr	r3, [r3, #20]
 8001906:	21f8      	movs	r1, #248	; 0xf8
 8001908:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800190c:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001910:	fa91 f1a1 	rbit	r1, r1
 8001914:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8001918:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 800191c:	fab1 f181 	clz	r1, r1
 8001920:	b2c9      	uxtb	r1, r1
 8001922:	408b      	lsls	r3, r1
 8001924:	4920      	ldr	r1, [pc, #128]	; (80019a8 <HAL_RCC_OscConfig+0x5e8>)
 8001926:	4313      	orrs	r3, r2
 8001928:	600b      	str	r3, [r1, #0]
 800192a:	e06c      	b.n	8001a06 <HAL_RCC_OscConfig+0x646>
 800192c:	2301      	movs	r3, #1
 800192e:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001932:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001936:	fa93 f3a3 	rbit	r3, r3
 800193a:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 800193e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001942:	fab3 f383 	clz	r3, r3
 8001946:	b2db      	uxtb	r3, r3
 8001948:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800194c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001950:	009b      	lsls	r3, r3, #2
 8001952:	461a      	mov	r2, r3
 8001954:	2300      	movs	r3, #0
 8001956:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001958:	f7ff f94c 	bl	8000bf4 <HAL_GetTick>
 800195c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001960:	e00a      	b.n	8001978 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001962:	f7ff f947 	bl	8000bf4 <HAL_GetTick>
 8001966:	4602      	mov	r2, r0
 8001968:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800196c:	1ad3      	subs	r3, r2, r3
 800196e:	2b02      	cmp	r3, #2
 8001970:	d902      	bls.n	8001978 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8001972:	2303      	movs	r3, #3
 8001974:	f000 bd5a 	b.w	800242c <HAL_RCC_OscConfig+0x106c>
 8001978:	2302      	movs	r3, #2
 800197a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800197e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001982:	fa93 f3a3 	rbit	r3, r3
 8001986:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 800198a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800198e:	fab3 f383 	clz	r3, r3
 8001992:	b2db      	uxtb	r3, r3
 8001994:	095b      	lsrs	r3, r3, #5
 8001996:	b2db      	uxtb	r3, r3
 8001998:	f043 0301 	orr.w	r3, r3, #1
 800199c:	b2db      	uxtb	r3, r3
 800199e:	2b01      	cmp	r3, #1
 80019a0:	d104      	bne.n	80019ac <HAL_RCC_OscConfig+0x5ec>
 80019a2:	4b01      	ldr	r3, [pc, #4]	; (80019a8 <HAL_RCC_OscConfig+0x5e8>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	e015      	b.n	80019d4 <HAL_RCC_OscConfig+0x614>
 80019a8:	40021000 	.word	0x40021000
 80019ac:	2302      	movs	r3, #2
 80019ae:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019b2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80019b6:	fa93 f3a3 	rbit	r3, r3
 80019ba:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80019be:	2302      	movs	r3, #2
 80019c0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80019c4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80019c8:	fa93 f3a3 	rbit	r3, r3
 80019cc:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80019d0:	4bc8      	ldr	r3, [pc, #800]	; (8001cf4 <HAL_RCC_OscConfig+0x934>)
 80019d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019d4:	2202      	movs	r2, #2
 80019d6:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 80019da:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80019de:	fa92 f2a2 	rbit	r2, r2
 80019e2:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 80019e6:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80019ea:	fab2 f282 	clz	r2, r2
 80019ee:	b2d2      	uxtb	r2, r2
 80019f0:	f042 0220 	orr.w	r2, r2, #32
 80019f4:	b2d2      	uxtb	r2, r2
 80019f6:	f002 021f 	and.w	r2, r2, #31
 80019fa:	2101      	movs	r1, #1
 80019fc:	fa01 f202 	lsl.w	r2, r1, r2
 8001a00:	4013      	ands	r3, r2
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d1ad      	bne.n	8001962 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a06:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a0a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f003 0308 	and.w	r3, r3, #8
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	f000 8110 	beq.w	8001c3c <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001a1c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a20:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	699b      	ldr	r3, [r3, #24]
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d079      	beq.n	8001b20 <HAL_RCC_OscConfig+0x760>
 8001a2c:	2301      	movs	r3, #1
 8001a2e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a32:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001a36:	fa93 f3a3 	rbit	r3, r3
 8001a3a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8001a3e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a42:	fab3 f383 	clz	r3, r3
 8001a46:	b2db      	uxtb	r3, r3
 8001a48:	461a      	mov	r2, r3
 8001a4a:	4bab      	ldr	r3, [pc, #684]	; (8001cf8 <HAL_RCC_OscConfig+0x938>)
 8001a4c:	4413      	add	r3, r2
 8001a4e:	009b      	lsls	r3, r3, #2
 8001a50:	461a      	mov	r2, r3
 8001a52:	2301      	movs	r3, #1
 8001a54:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a56:	f7ff f8cd 	bl	8000bf4 <HAL_GetTick>
 8001a5a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a5e:	e00a      	b.n	8001a76 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a60:	f7ff f8c8 	bl	8000bf4 <HAL_GetTick>
 8001a64:	4602      	mov	r2, r0
 8001a66:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001a6a:	1ad3      	subs	r3, r2, r3
 8001a6c:	2b02      	cmp	r3, #2
 8001a6e:	d902      	bls.n	8001a76 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8001a70:	2303      	movs	r3, #3
 8001a72:	f000 bcdb 	b.w	800242c <HAL_RCC_OscConfig+0x106c>
 8001a76:	2302      	movs	r3, #2
 8001a78:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a7c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001a80:	fa93 f3a3 	rbit	r3, r3
 8001a84:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001a88:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a8c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001a90:	2202      	movs	r2, #2
 8001a92:	601a      	str	r2, [r3, #0]
 8001a94:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a98:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	fa93 f2a3 	rbit	r2, r3
 8001aa2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001aa6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001aaa:	601a      	str	r2, [r3, #0]
 8001aac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ab0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001ab4:	2202      	movs	r2, #2
 8001ab6:	601a      	str	r2, [r3, #0]
 8001ab8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001abc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	fa93 f2a3 	rbit	r2, r3
 8001ac6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001aca:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001ace:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ad0:	4b88      	ldr	r3, [pc, #544]	; (8001cf4 <HAL_RCC_OscConfig+0x934>)
 8001ad2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001ad4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ad8:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001adc:	2102      	movs	r1, #2
 8001ade:	6019      	str	r1, [r3, #0]
 8001ae0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ae4:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	fa93 f1a3 	rbit	r1, r3
 8001aee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001af2:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001af6:	6019      	str	r1, [r3, #0]
  return result;
 8001af8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001afc:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	fab3 f383 	clz	r3, r3
 8001b06:	b2db      	uxtb	r3, r3
 8001b08:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001b0c:	b2db      	uxtb	r3, r3
 8001b0e:	f003 031f 	and.w	r3, r3, #31
 8001b12:	2101      	movs	r1, #1
 8001b14:	fa01 f303 	lsl.w	r3, r1, r3
 8001b18:	4013      	ands	r3, r2
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d0a0      	beq.n	8001a60 <HAL_RCC_OscConfig+0x6a0>
 8001b1e:	e08d      	b.n	8001c3c <HAL_RCC_OscConfig+0x87c>
 8001b20:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b24:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001b28:	2201      	movs	r2, #1
 8001b2a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b2c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b30:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	fa93 f2a3 	rbit	r2, r3
 8001b3a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b3e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001b42:	601a      	str	r2, [r3, #0]
  return result;
 8001b44:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b48:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001b4c:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b4e:	fab3 f383 	clz	r3, r3
 8001b52:	b2db      	uxtb	r3, r3
 8001b54:	461a      	mov	r2, r3
 8001b56:	4b68      	ldr	r3, [pc, #416]	; (8001cf8 <HAL_RCC_OscConfig+0x938>)
 8001b58:	4413      	add	r3, r2
 8001b5a:	009b      	lsls	r3, r3, #2
 8001b5c:	461a      	mov	r2, r3
 8001b5e:	2300      	movs	r3, #0
 8001b60:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b62:	f7ff f847 	bl	8000bf4 <HAL_GetTick>
 8001b66:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b6a:	e00a      	b.n	8001b82 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b6c:	f7ff f842 	bl	8000bf4 <HAL_GetTick>
 8001b70:	4602      	mov	r2, r0
 8001b72:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001b76:	1ad3      	subs	r3, r2, r3
 8001b78:	2b02      	cmp	r3, #2
 8001b7a:	d902      	bls.n	8001b82 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8001b7c:	2303      	movs	r3, #3
 8001b7e:	f000 bc55 	b.w	800242c <HAL_RCC_OscConfig+0x106c>
 8001b82:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b86:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001b8a:	2202      	movs	r2, #2
 8001b8c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b8e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b92:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	fa93 f2a3 	rbit	r2, r3
 8001b9c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ba0:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001ba4:	601a      	str	r2, [r3, #0]
 8001ba6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001baa:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001bae:	2202      	movs	r2, #2
 8001bb0:	601a      	str	r2, [r3, #0]
 8001bb2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bb6:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	fa93 f2a3 	rbit	r2, r3
 8001bc0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bc4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001bc8:	601a      	str	r2, [r3, #0]
 8001bca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bce:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001bd2:	2202      	movs	r2, #2
 8001bd4:	601a      	str	r2, [r3, #0]
 8001bd6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bda:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	fa93 f2a3 	rbit	r2, r3
 8001be4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001be8:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001bec:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001bee:	4b41      	ldr	r3, [pc, #260]	; (8001cf4 <HAL_RCC_OscConfig+0x934>)
 8001bf0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001bf2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bf6:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8001bfa:	2102      	movs	r1, #2
 8001bfc:	6019      	str	r1, [r3, #0]
 8001bfe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c02:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	fa93 f1a3 	rbit	r1, r3
 8001c0c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c10:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001c14:	6019      	str	r1, [r3, #0]
  return result;
 8001c16:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c1a:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	fab3 f383 	clz	r3, r3
 8001c24:	b2db      	uxtb	r3, r3
 8001c26:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001c2a:	b2db      	uxtb	r3, r3
 8001c2c:	f003 031f 	and.w	r3, r3, #31
 8001c30:	2101      	movs	r1, #1
 8001c32:	fa01 f303 	lsl.w	r3, r1, r3
 8001c36:	4013      	ands	r3, r2
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d197      	bne.n	8001b6c <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c3c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c40:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f003 0304 	and.w	r3, r3, #4
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	f000 81a1 	beq.w	8001f94 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c52:	2300      	movs	r3, #0
 8001c54:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c58:	4b26      	ldr	r3, [pc, #152]	; (8001cf4 <HAL_RCC_OscConfig+0x934>)
 8001c5a:	69db      	ldr	r3, [r3, #28]
 8001c5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d116      	bne.n	8001c92 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c64:	4b23      	ldr	r3, [pc, #140]	; (8001cf4 <HAL_RCC_OscConfig+0x934>)
 8001c66:	69db      	ldr	r3, [r3, #28]
 8001c68:	4a22      	ldr	r2, [pc, #136]	; (8001cf4 <HAL_RCC_OscConfig+0x934>)
 8001c6a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c6e:	61d3      	str	r3, [r2, #28]
 8001c70:	4b20      	ldr	r3, [pc, #128]	; (8001cf4 <HAL_RCC_OscConfig+0x934>)
 8001c72:	69db      	ldr	r3, [r3, #28]
 8001c74:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001c78:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c7c:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8001c80:	601a      	str	r2, [r3, #0]
 8001c82:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c86:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8001c8a:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001c8c:	2301      	movs	r3, #1
 8001c8e:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c92:	4b1a      	ldr	r3, [pc, #104]	; (8001cfc <HAL_RCC_OscConfig+0x93c>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d11a      	bne.n	8001cd4 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c9e:	4b17      	ldr	r3, [pc, #92]	; (8001cfc <HAL_RCC_OscConfig+0x93c>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	4a16      	ldr	r2, [pc, #88]	; (8001cfc <HAL_RCC_OscConfig+0x93c>)
 8001ca4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ca8:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001caa:	f7fe ffa3 	bl	8000bf4 <HAL_GetTick>
 8001cae:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cb2:	e009      	b.n	8001cc8 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001cb4:	f7fe ff9e 	bl	8000bf4 <HAL_GetTick>
 8001cb8:	4602      	mov	r2, r0
 8001cba:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001cbe:	1ad3      	subs	r3, r2, r3
 8001cc0:	2b64      	cmp	r3, #100	; 0x64
 8001cc2:	d901      	bls.n	8001cc8 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8001cc4:	2303      	movs	r3, #3
 8001cc6:	e3b1      	b.n	800242c <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cc8:	4b0c      	ldr	r3, [pc, #48]	; (8001cfc <HAL_RCC_OscConfig+0x93c>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d0ef      	beq.n	8001cb4 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001cd4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cd8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	68db      	ldr	r3, [r3, #12]
 8001ce0:	2b01      	cmp	r3, #1
 8001ce2:	d10d      	bne.n	8001d00 <HAL_RCC_OscConfig+0x940>
 8001ce4:	4b03      	ldr	r3, [pc, #12]	; (8001cf4 <HAL_RCC_OscConfig+0x934>)
 8001ce6:	6a1b      	ldr	r3, [r3, #32]
 8001ce8:	4a02      	ldr	r2, [pc, #8]	; (8001cf4 <HAL_RCC_OscConfig+0x934>)
 8001cea:	f043 0301 	orr.w	r3, r3, #1
 8001cee:	6213      	str	r3, [r2, #32]
 8001cf0:	e03c      	b.n	8001d6c <HAL_RCC_OscConfig+0x9ac>
 8001cf2:	bf00      	nop
 8001cf4:	40021000 	.word	0x40021000
 8001cf8:	10908120 	.word	0x10908120
 8001cfc:	40007000 	.word	0x40007000
 8001d00:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d04:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	68db      	ldr	r3, [r3, #12]
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d10c      	bne.n	8001d2a <HAL_RCC_OscConfig+0x96a>
 8001d10:	4bc1      	ldr	r3, [pc, #772]	; (8002018 <HAL_RCC_OscConfig+0xc58>)
 8001d12:	6a1b      	ldr	r3, [r3, #32]
 8001d14:	4ac0      	ldr	r2, [pc, #768]	; (8002018 <HAL_RCC_OscConfig+0xc58>)
 8001d16:	f023 0301 	bic.w	r3, r3, #1
 8001d1a:	6213      	str	r3, [r2, #32]
 8001d1c:	4bbe      	ldr	r3, [pc, #760]	; (8002018 <HAL_RCC_OscConfig+0xc58>)
 8001d1e:	6a1b      	ldr	r3, [r3, #32]
 8001d20:	4abd      	ldr	r2, [pc, #756]	; (8002018 <HAL_RCC_OscConfig+0xc58>)
 8001d22:	f023 0304 	bic.w	r3, r3, #4
 8001d26:	6213      	str	r3, [r2, #32]
 8001d28:	e020      	b.n	8001d6c <HAL_RCC_OscConfig+0x9ac>
 8001d2a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d2e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	68db      	ldr	r3, [r3, #12]
 8001d36:	2b05      	cmp	r3, #5
 8001d38:	d10c      	bne.n	8001d54 <HAL_RCC_OscConfig+0x994>
 8001d3a:	4bb7      	ldr	r3, [pc, #732]	; (8002018 <HAL_RCC_OscConfig+0xc58>)
 8001d3c:	6a1b      	ldr	r3, [r3, #32]
 8001d3e:	4ab6      	ldr	r2, [pc, #728]	; (8002018 <HAL_RCC_OscConfig+0xc58>)
 8001d40:	f043 0304 	orr.w	r3, r3, #4
 8001d44:	6213      	str	r3, [r2, #32]
 8001d46:	4bb4      	ldr	r3, [pc, #720]	; (8002018 <HAL_RCC_OscConfig+0xc58>)
 8001d48:	6a1b      	ldr	r3, [r3, #32]
 8001d4a:	4ab3      	ldr	r2, [pc, #716]	; (8002018 <HAL_RCC_OscConfig+0xc58>)
 8001d4c:	f043 0301 	orr.w	r3, r3, #1
 8001d50:	6213      	str	r3, [r2, #32]
 8001d52:	e00b      	b.n	8001d6c <HAL_RCC_OscConfig+0x9ac>
 8001d54:	4bb0      	ldr	r3, [pc, #704]	; (8002018 <HAL_RCC_OscConfig+0xc58>)
 8001d56:	6a1b      	ldr	r3, [r3, #32]
 8001d58:	4aaf      	ldr	r2, [pc, #700]	; (8002018 <HAL_RCC_OscConfig+0xc58>)
 8001d5a:	f023 0301 	bic.w	r3, r3, #1
 8001d5e:	6213      	str	r3, [r2, #32]
 8001d60:	4bad      	ldr	r3, [pc, #692]	; (8002018 <HAL_RCC_OscConfig+0xc58>)
 8001d62:	6a1b      	ldr	r3, [r3, #32]
 8001d64:	4aac      	ldr	r2, [pc, #688]	; (8002018 <HAL_RCC_OscConfig+0xc58>)
 8001d66:	f023 0304 	bic.w	r3, r3, #4
 8001d6a:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001d6c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d70:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	68db      	ldr	r3, [r3, #12]
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	f000 8081 	beq.w	8001e80 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d7e:	f7fe ff39 	bl	8000bf4 <HAL_GetTick>
 8001d82:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d86:	e00b      	b.n	8001da0 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d88:	f7fe ff34 	bl	8000bf4 <HAL_GetTick>
 8001d8c:	4602      	mov	r2, r0
 8001d8e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001d92:	1ad3      	subs	r3, r2, r3
 8001d94:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d98:	4293      	cmp	r3, r2
 8001d9a:	d901      	bls.n	8001da0 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8001d9c:	2303      	movs	r3, #3
 8001d9e:	e345      	b.n	800242c <HAL_RCC_OscConfig+0x106c>
 8001da0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001da4:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001da8:	2202      	movs	r2, #2
 8001daa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001db0:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	fa93 f2a3 	rbit	r2, r3
 8001dba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001dbe:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8001dc2:	601a      	str	r2, [r3, #0]
 8001dc4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001dc8:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8001dcc:	2202      	movs	r2, #2
 8001dce:	601a      	str	r2, [r3, #0]
 8001dd0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001dd4:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	fa93 f2a3 	rbit	r2, r3
 8001dde:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001de2:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001de6:	601a      	str	r2, [r3, #0]
  return result;
 8001de8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001dec:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001df0:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001df2:	fab3 f383 	clz	r3, r3
 8001df6:	b2db      	uxtb	r3, r3
 8001df8:	095b      	lsrs	r3, r3, #5
 8001dfa:	b2db      	uxtb	r3, r3
 8001dfc:	f043 0302 	orr.w	r3, r3, #2
 8001e00:	b2db      	uxtb	r3, r3
 8001e02:	2b02      	cmp	r3, #2
 8001e04:	d102      	bne.n	8001e0c <HAL_RCC_OscConfig+0xa4c>
 8001e06:	4b84      	ldr	r3, [pc, #528]	; (8002018 <HAL_RCC_OscConfig+0xc58>)
 8001e08:	6a1b      	ldr	r3, [r3, #32]
 8001e0a:	e013      	b.n	8001e34 <HAL_RCC_OscConfig+0xa74>
 8001e0c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e10:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001e14:	2202      	movs	r2, #2
 8001e16:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e18:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e1c:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	fa93 f2a3 	rbit	r2, r3
 8001e26:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e2a:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8001e2e:	601a      	str	r2, [r3, #0]
 8001e30:	4b79      	ldr	r3, [pc, #484]	; (8002018 <HAL_RCC_OscConfig+0xc58>)
 8001e32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e34:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001e38:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8001e3c:	2102      	movs	r1, #2
 8001e3e:	6011      	str	r1, [r2, #0]
 8001e40:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001e44:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8001e48:	6812      	ldr	r2, [r2, #0]
 8001e4a:	fa92 f1a2 	rbit	r1, r2
 8001e4e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001e52:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8001e56:	6011      	str	r1, [r2, #0]
  return result;
 8001e58:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001e5c:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8001e60:	6812      	ldr	r2, [r2, #0]
 8001e62:	fab2 f282 	clz	r2, r2
 8001e66:	b2d2      	uxtb	r2, r2
 8001e68:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001e6c:	b2d2      	uxtb	r2, r2
 8001e6e:	f002 021f 	and.w	r2, r2, #31
 8001e72:	2101      	movs	r1, #1
 8001e74:	fa01 f202 	lsl.w	r2, r1, r2
 8001e78:	4013      	ands	r3, r2
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d084      	beq.n	8001d88 <HAL_RCC_OscConfig+0x9c8>
 8001e7e:	e07f      	b.n	8001f80 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e80:	f7fe feb8 	bl	8000bf4 <HAL_GetTick>
 8001e84:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e88:	e00b      	b.n	8001ea2 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e8a:	f7fe feb3 	bl	8000bf4 <HAL_GetTick>
 8001e8e:	4602      	mov	r2, r0
 8001e90:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001e94:	1ad3      	subs	r3, r2, r3
 8001e96:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e9a:	4293      	cmp	r3, r2
 8001e9c:	d901      	bls.n	8001ea2 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8001e9e:	2303      	movs	r3, #3
 8001ea0:	e2c4      	b.n	800242c <HAL_RCC_OscConfig+0x106c>
 8001ea2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ea6:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8001eaa:	2202      	movs	r2, #2
 8001eac:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001eb2:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	fa93 f2a3 	rbit	r2, r3
 8001ebc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ec0:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8001ec4:	601a      	str	r2, [r3, #0]
 8001ec6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001eca:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8001ece:	2202      	movs	r2, #2
 8001ed0:	601a      	str	r2, [r3, #0]
 8001ed2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ed6:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	fa93 f2a3 	rbit	r2, r3
 8001ee0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ee4:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8001ee8:	601a      	str	r2, [r3, #0]
  return result;
 8001eea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001eee:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8001ef2:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ef4:	fab3 f383 	clz	r3, r3
 8001ef8:	b2db      	uxtb	r3, r3
 8001efa:	095b      	lsrs	r3, r3, #5
 8001efc:	b2db      	uxtb	r3, r3
 8001efe:	f043 0302 	orr.w	r3, r3, #2
 8001f02:	b2db      	uxtb	r3, r3
 8001f04:	2b02      	cmp	r3, #2
 8001f06:	d102      	bne.n	8001f0e <HAL_RCC_OscConfig+0xb4e>
 8001f08:	4b43      	ldr	r3, [pc, #268]	; (8002018 <HAL_RCC_OscConfig+0xc58>)
 8001f0a:	6a1b      	ldr	r3, [r3, #32]
 8001f0c:	e013      	b.n	8001f36 <HAL_RCC_OscConfig+0xb76>
 8001f0e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f12:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8001f16:	2202      	movs	r2, #2
 8001f18:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f1a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f1e:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	fa93 f2a3 	rbit	r2, r3
 8001f28:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f2c:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8001f30:	601a      	str	r2, [r3, #0]
 8001f32:	4b39      	ldr	r3, [pc, #228]	; (8002018 <HAL_RCC_OscConfig+0xc58>)
 8001f34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f36:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001f3a:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8001f3e:	2102      	movs	r1, #2
 8001f40:	6011      	str	r1, [r2, #0]
 8001f42:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001f46:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8001f4a:	6812      	ldr	r2, [r2, #0]
 8001f4c:	fa92 f1a2 	rbit	r1, r2
 8001f50:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001f54:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8001f58:	6011      	str	r1, [r2, #0]
  return result;
 8001f5a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001f5e:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8001f62:	6812      	ldr	r2, [r2, #0]
 8001f64:	fab2 f282 	clz	r2, r2
 8001f68:	b2d2      	uxtb	r2, r2
 8001f6a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001f6e:	b2d2      	uxtb	r2, r2
 8001f70:	f002 021f 	and.w	r2, r2, #31
 8001f74:	2101      	movs	r1, #1
 8001f76:	fa01 f202 	lsl.w	r2, r1, r2
 8001f7a:	4013      	ands	r3, r2
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d184      	bne.n	8001e8a <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001f80:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8001f84:	2b01      	cmp	r3, #1
 8001f86:	d105      	bne.n	8001f94 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f88:	4b23      	ldr	r3, [pc, #140]	; (8002018 <HAL_RCC_OscConfig+0xc58>)
 8001f8a:	69db      	ldr	r3, [r3, #28]
 8001f8c:	4a22      	ldr	r2, [pc, #136]	; (8002018 <HAL_RCC_OscConfig+0xc58>)
 8001f8e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f92:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f94:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f98:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	69db      	ldr	r3, [r3, #28]
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	f000 8242 	beq.w	800242a <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001fa6:	4b1c      	ldr	r3, [pc, #112]	; (8002018 <HAL_RCC_OscConfig+0xc58>)
 8001fa8:	685b      	ldr	r3, [r3, #4]
 8001faa:	f003 030c 	and.w	r3, r3, #12
 8001fae:	2b08      	cmp	r3, #8
 8001fb0:	f000 8213 	beq.w	80023da <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001fb4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fb8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	69db      	ldr	r3, [r3, #28]
 8001fc0:	2b02      	cmp	r3, #2
 8001fc2:	f040 8162 	bne.w	800228a <HAL_RCC_OscConfig+0xeca>
 8001fc6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fca:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8001fce:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001fd2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fd4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fd8:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	fa93 f2a3 	rbit	r2, r3
 8001fe2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fe6:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8001fea:	601a      	str	r2, [r3, #0]
  return result;
 8001fec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ff0:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8001ff4:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ff6:	fab3 f383 	clz	r3, r3
 8001ffa:	b2db      	uxtb	r3, r3
 8001ffc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002000:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002004:	009b      	lsls	r3, r3, #2
 8002006:	461a      	mov	r2, r3
 8002008:	2300      	movs	r3, #0
 800200a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800200c:	f7fe fdf2 	bl	8000bf4 <HAL_GetTick>
 8002010:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002014:	e00c      	b.n	8002030 <HAL_RCC_OscConfig+0xc70>
 8002016:	bf00      	nop
 8002018:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800201c:	f7fe fdea 	bl	8000bf4 <HAL_GetTick>
 8002020:	4602      	mov	r2, r0
 8002022:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002026:	1ad3      	subs	r3, r2, r3
 8002028:	2b02      	cmp	r3, #2
 800202a:	d901      	bls.n	8002030 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 800202c:	2303      	movs	r3, #3
 800202e:	e1fd      	b.n	800242c <HAL_RCC_OscConfig+0x106c>
 8002030:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002034:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002038:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800203c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800203e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002042:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	fa93 f2a3 	rbit	r2, r3
 800204c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002050:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002054:	601a      	str	r2, [r3, #0]
  return result;
 8002056:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800205a:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800205e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002060:	fab3 f383 	clz	r3, r3
 8002064:	b2db      	uxtb	r3, r3
 8002066:	095b      	lsrs	r3, r3, #5
 8002068:	b2db      	uxtb	r3, r3
 800206a:	f043 0301 	orr.w	r3, r3, #1
 800206e:	b2db      	uxtb	r3, r3
 8002070:	2b01      	cmp	r3, #1
 8002072:	d102      	bne.n	800207a <HAL_RCC_OscConfig+0xcba>
 8002074:	4bb0      	ldr	r3, [pc, #704]	; (8002338 <HAL_RCC_OscConfig+0xf78>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	e027      	b.n	80020ca <HAL_RCC_OscConfig+0xd0a>
 800207a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800207e:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002082:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002086:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002088:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800208c:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	fa93 f2a3 	rbit	r2, r3
 8002096:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800209a:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 800209e:	601a      	str	r2, [r3, #0]
 80020a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020a4:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80020a8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80020ac:	601a      	str	r2, [r3, #0]
 80020ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020b2:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	fa93 f2a3 	rbit	r2, r3
 80020bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020c0:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80020c4:	601a      	str	r2, [r3, #0]
 80020c6:	4b9c      	ldr	r3, [pc, #624]	; (8002338 <HAL_RCC_OscConfig+0xf78>)
 80020c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020ca:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80020ce:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 80020d2:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80020d6:	6011      	str	r1, [r2, #0]
 80020d8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80020dc:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 80020e0:	6812      	ldr	r2, [r2, #0]
 80020e2:	fa92 f1a2 	rbit	r1, r2
 80020e6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80020ea:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80020ee:	6011      	str	r1, [r2, #0]
  return result;
 80020f0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80020f4:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80020f8:	6812      	ldr	r2, [r2, #0]
 80020fa:	fab2 f282 	clz	r2, r2
 80020fe:	b2d2      	uxtb	r2, r2
 8002100:	f042 0220 	orr.w	r2, r2, #32
 8002104:	b2d2      	uxtb	r2, r2
 8002106:	f002 021f 	and.w	r2, r2, #31
 800210a:	2101      	movs	r1, #1
 800210c:	fa01 f202 	lsl.w	r2, r1, r2
 8002110:	4013      	ands	r3, r2
 8002112:	2b00      	cmp	r3, #0
 8002114:	d182      	bne.n	800201c <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002116:	4b88      	ldr	r3, [pc, #544]	; (8002338 <HAL_RCC_OscConfig+0xf78>)
 8002118:	685b      	ldr	r3, [r3, #4]
 800211a:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800211e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002122:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800212a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800212e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	6a1b      	ldr	r3, [r3, #32]
 8002136:	430b      	orrs	r3, r1
 8002138:	497f      	ldr	r1, [pc, #508]	; (8002338 <HAL_RCC_OscConfig+0xf78>)
 800213a:	4313      	orrs	r3, r2
 800213c:	604b      	str	r3, [r1, #4]
 800213e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002142:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8002146:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800214a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800214c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002150:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	fa93 f2a3 	rbit	r2, r3
 800215a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800215e:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002162:	601a      	str	r2, [r3, #0]
  return result;
 8002164:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002168:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800216c:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800216e:	fab3 f383 	clz	r3, r3
 8002172:	b2db      	uxtb	r3, r3
 8002174:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002178:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800217c:	009b      	lsls	r3, r3, #2
 800217e:	461a      	mov	r2, r3
 8002180:	2301      	movs	r3, #1
 8002182:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002184:	f7fe fd36 	bl	8000bf4 <HAL_GetTick>
 8002188:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800218c:	e009      	b.n	80021a2 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800218e:	f7fe fd31 	bl	8000bf4 <HAL_GetTick>
 8002192:	4602      	mov	r2, r0
 8002194:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002198:	1ad3      	subs	r3, r2, r3
 800219a:	2b02      	cmp	r3, #2
 800219c:	d901      	bls.n	80021a2 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 800219e:	2303      	movs	r3, #3
 80021a0:	e144      	b.n	800242c <HAL_RCC_OscConfig+0x106c>
 80021a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021a6:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80021aa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80021ae:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021b4:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	fa93 f2a3 	rbit	r2, r3
 80021be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021c2:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80021c6:	601a      	str	r2, [r3, #0]
  return result;
 80021c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021cc:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80021d0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80021d2:	fab3 f383 	clz	r3, r3
 80021d6:	b2db      	uxtb	r3, r3
 80021d8:	095b      	lsrs	r3, r3, #5
 80021da:	b2db      	uxtb	r3, r3
 80021dc:	f043 0301 	orr.w	r3, r3, #1
 80021e0:	b2db      	uxtb	r3, r3
 80021e2:	2b01      	cmp	r3, #1
 80021e4:	d102      	bne.n	80021ec <HAL_RCC_OscConfig+0xe2c>
 80021e6:	4b54      	ldr	r3, [pc, #336]	; (8002338 <HAL_RCC_OscConfig+0xf78>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	e027      	b.n	800223c <HAL_RCC_OscConfig+0xe7c>
 80021ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021f0:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80021f4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80021f8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021fe:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	fa93 f2a3 	rbit	r2, r3
 8002208:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800220c:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8002210:	601a      	str	r2, [r3, #0]
 8002212:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002216:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 800221a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800221e:	601a      	str	r2, [r3, #0]
 8002220:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002224:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	fa93 f2a3 	rbit	r2, r3
 800222e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002232:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8002236:	601a      	str	r2, [r3, #0]
 8002238:	4b3f      	ldr	r3, [pc, #252]	; (8002338 <HAL_RCC_OscConfig+0xf78>)
 800223a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800223c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002240:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8002244:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002248:	6011      	str	r1, [r2, #0]
 800224a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800224e:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8002252:	6812      	ldr	r2, [r2, #0]
 8002254:	fa92 f1a2 	rbit	r1, r2
 8002258:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800225c:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002260:	6011      	str	r1, [r2, #0]
  return result;
 8002262:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002266:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 800226a:	6812      	ldr	r2, [r2, #0]
 800226c:	fab2 f282 	clz	r2, r2
 8002270:	b2d2      	uxtb	r2, r2
 8002272:	f042 0220 	orr.w	r2, r2, #32
 8002276:	b2d2      	uxtb	r2, r2
 8002278:	f002 021f 	and.w	r2, r2, #31
 800227c:	2101      	movs	r1, #1
 800227e:	fa01 f202 	lsl.w	r2, r1, r2
 8002282:	4013      	ands	r3, r2
 8002284:	2b00      	cmp	r3, #0
 8002286:	d082      	beq.n	800218e <HAL_RCC_OscConfig+0xdce>
 8002288:	e0cf      	b.n	800242a <HAL_RCC_OscConfig+0x106a>
 800228a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800228e:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8002292:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002296:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002298:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800229c:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	fa93 f2a3 	rbit	r2, r3
 80022a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022aa:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80022ae:	601a      	str	r2, [r3, #0]
  return result;
 80022b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022b4:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80022b8:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022ba:	fab3 f383 	clz	r3, r3
 80022be:	b2db      	uxtb	r3, r3
 80022c0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80022c4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80022c8:	009b      	lsls	r3, r3, #2
 80022ca:	461a      	mov	r2, r3
 80022cc:	2300      	movs	r3, #0
 80022ce:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022d0:	f7fe fc90 	bl	8000bf4 <HAL_GetTick>
 80022d4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022d8:	e009      	b.n	80022ee <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022da:	f7fe fc8b 	bl	8000bf4 <HAL_GetTick>
 80022de:	4602      	mov	r2, r0
 80022e0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80022e4:	1ad3      	subs	r3, r2, r3
 80022e6:	2b02      	cmp	r3, #2
 80022e8:	d901      	bls.n	80022ee <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 80022ea:	2303      	movs	r3, #3
 80022ec:	e09e      	b.n	800242c <HAL_RCC_OscConfig+0x106c>
 80022ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022f2:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80022f6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80022fa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002300:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	fa93 f2a3 	rbit	r2, r3
 800230a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800230e:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002312:	601a      	str	r2, [r3, #0]
  return result;
 8002314:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002318:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800231c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800231e:	fab3 f383 	clz	r3, r3
 8002322:	b2db      	uxtb	r3, r3
 8002324:	095b      	lsrs	r3, r3, #5
 8002326:	b2db      	uxtb	r3, r3
 8002328:	f043 0301 	orr.w	r3, r3, #1
 800232c:	b2db      	uxtb	r3, r3
 800232e:	2b01      	cmp	r3, #1
 8002330:	d104      	bne.n	800233c <HAL_RCC_OscConfig+0xf7c>
 8002332:	4b01      	ldr	r3, [pc, #4]	; (8002338 <HAL_RCC_OscConfig+0xf78>)
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	e029      	b.n	800238c <HAL_RCC_OscConfig+0xfcc>
 8002338:	40021000 	.word	0x40021000
 800233c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002340:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002344:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002348:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800234a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800234e:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	fa93 f2a3 	rbit	r2, r3
 8002358:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800235c:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8002360:	601a      	str	r2, [r3, #0]
 8002362:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002366:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800236a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800236e:	601a      	str	r2, [r3, #0]
 8002370:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002374:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	fa93 f2a3 	rbit	r2, r3
 800237e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002382:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8002386:	601a      	str	r2, [r3, #0]
 8002388:	4b2b      	ldr	r3, [pc, #172]	; (8002438 <HAL_RCC_OscConfig+0x1078>)
 800238a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800238c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002390:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8002394:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002398:	6011      	str	r1, [r2, #0]
 800239a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800239e:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 80023a2:	6812      	ldr	r2, [r2, #0]
 80023a4:	fa92 f1a2 	rbit	r1, r2
 80023a8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80023ac:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80023b0:	6011      	str	r1, [r2, #0]
  return result;
 80023b2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80023b6:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80023ba:	6812      	ldr	r2, [r2, #0]
 80023bc:	fab2 f282 	clz	r2, r2
 80023c0:	b2d2      	uxtb	r2, r2
 80023c2:	f042 0220 	orr.w	r2, r2, #32
 80023c6:	b2d2      	uxtb	r2, r2
 80023c8:	f002 021f 	and.w	r2, r2, #31
 80023cc:	2101      	movs	r1, #1
 80023ce:	fa01 f202 	lsl.w	r2, r1, r2
 80023d2:	4013      	ands	r3, r2
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d180      	bne.n	80022da <HAL_RCC_OscConfig+0xf1a>
 80023d8:	e027      	b.n	800242a <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80023da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023de:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	69db      	ldr	r3, [r3, #28]
 80023e6:	2b01      	cmp	r3, #1
 80023e8:	d101      	bne.n	80023ee <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 80023ea:	2301      	movs	r3, #1
 80023ec:	e01e      	b.n	800242c <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80023ee:	4b12      	ldr	r3, [pc, #72]	; (8002438 <HAL_RCC_OscConfig+0x1078>)
 80023f0:	685b      	ldr	r3, [r3, #4]
 80023f2:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80023f6:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80023fa:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80023fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002402:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	6a1b      	ldr	r3, [r3, #32]
 800240a:	429a      	cmp	r2, r3
 800240c:	d10b      	bne.n	8002426 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 800240e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002412:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002416:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800241a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002422:	429a      	cmp	r2, r3
 8002424:	d001      	beq.n	800242a <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8002426:	2301      	movs	r3, #1
 8002428:	e000      	b.n	800242c <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 800242a:	2300      	movs	r3, #0
}
 800242c:	4618      	mov	r0, r3
 800242e:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8002432:	46bd      	mov	sp, r7
 8002434:	bd80      	pop	{r7, pc}
 8002436:	bf00      	nop
 8002438:	40021000 	.word	0x40021000

0800243c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	b09e      	sub	sp, #120	; 0x78
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
 8002444:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002446:	2300      	movs	r3, #0
 8002448:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	2b00      	cmp	r3, #0
 800244e:	d101      	bne.n	8002454 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002450:	2301      	movs	r3, #1
 8002452:	e162      	b.n	800271a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002454:	4b90      	ldr	r3, [pc, #576]	; (8002698 <HAL_RCC_ClockConfig+0x25c>)
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f003 0307 	and.w	r3, r3, #7
 800245c:	683a      	ldr	r2, [r7, #0]
 800245e:	429a      	cmp	r2, r3
 8002460:	d910      	bls.n	8002484 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002462:	4b8d      	ldr	r3, [pc, #564]	; (8002698 <HAL_RCC_ClockConfig+0x25c>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f023 0207 	bic.w	r2, r3, #7
 800246a:	498b      	ldr	r1, [pc, #556]	; (8002698 <HAL_RCC_ClockConfig+0x25c>)
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	4313      	orrs	r3, r2
 8002470:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002472:	4b89      	ldr	r3, [pc, #548]	; (8002698 <HAL_RCC_ClockConfig+0x25c>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f003 0307 	and.w	r3, r3, #7
 800247a:	683a      	ldr	r2, [r7, #0]
 800247c:	429a      	cmp	r2, r3
 800247e:	d001      	beq.n	8002484 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002480:	2301      	movs	r3, #1
 8002482:	e14a      	b.n	800271a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f003 0302 	and.w	r3, r3, #2
 800248c:	2b00      	cmp	r3, #0
 800248e:	d008      	beq.n	80024a2 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002490:	4b82      	ldr	r3, [pc, #520]	; (800269c <HAL_RCC_ClockConfig+0x260>)
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	689b      	ldr	r3, [r3, #8]
 800249c:	497f      	ldr	r1, [pc, #508]	; (800269c <HAL_RCC_ClockConfig+0x260>)
 800249e:	4313      	orrs	r3, r2
 80024a0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f003 0301 	and.w	r3, r3, #1
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	f000 80dc 	beq.w	8002668 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	685b      	ldr	r3, [r3, #4]
 80024b4:	2b01      	cmp	r3, #1
 80024b6:	d13c      	bne.n	8002532 <HAL_RCC_ClockConfig+0xf6>
 80024b8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80024bc:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024be:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80024c0:	fa93 f3a3 	rbit	r3, r3
 80024c4:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80024c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024c8:	fab3 f383 	clz	r3, r3
 80024cc:	b2db      	uxtb	r3, r3
 80024ce:	095b      	lsrs	r3, r3, #5
 80024d0:	b2db      	uxtb	r3, r3
 80024d2:	f043 0301 	orr.w	r3, r3, #1
 80024d6:	b2db      	uxtb	r3, r3
 80024d8:	2b01      	cmp	r3, #1
 80024da:	d102      	bne.n	80024e2 <HAL_RCC_ClockConfig+0xa6>
 80024dc:	4b6f      	ldr	r3, [pc, #444]	; (800269c <HAL_RCC_ClockConfig+0x260>)
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	e00f      	b.n	8002502 <HAL_RCC_ClockConfig+0xc6>
 80024e2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80024e6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024e8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80024ea:	fa93 f3a3 	rbit	r3, r3
 80024ee:	667b      	str	r3, [r7, #100]	; 0x64
 80024f0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80024f4:	663b      	str	r3, [r7, #96]	; 0x60
 80024f6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80024f8:	fa93 f3a3 	rbit	r3, r3
 80024fc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80024fe:	4b67      	ldr	r3, [pc, #412]	; (800269c <HAL_RCC_ClockConfig+0x260>)
 8002500:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002502:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002506:	65ba      	str	r2, [r7, #88]	; 0x58
 8002508:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800250a:	fa92 f2a2 	rbit	r2, r2
 800250e:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8002510:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002512:	fab2 f282 	clz	r2, r2
 8002516:	b2d2      	uxtb	r2, r2
 8002518:	f042 0220 	orr.w	r2, r2, #32
 800251c:	b2d2      	uxtb	r2, r2
 800251e:	f002 021f 	and.w	r2, r2, #31
 8002522:	2101      	movs	r1, #1
 8002524:	fa01 f202 	lsl.w	r2, r1, r2
 8002528:	4013      	ands	r3, r2
 800252a:	2b00      	cmp	r3, #0
 800252c:	d17b      	bne.n	8002626 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800252e:	2301      	movs	r3, #1
 8002530:	e0f3      	b.n	800271a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	685b      	ldr	r3, [r3, #4]
 8002536:	2b02      	cmp	r3, #2
 8002538:	d13c      	bne.n	80025b4 <HAL_RCC_ClockConfig+0x178>
 800253a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800253e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002540:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002542:	fa93 f3a3 	rbit	r3, r3
 8002546:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002548:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800254a:	fab3 f383 	clz	r3, r3
 800254e:	b2db      	uxtb	r3, r3
 8002550:	095b      	lsrs	r3, r3, #5
 8002552:	b2db      	uxtb	r3, r3
 8002554:	f043 0301 	orr.w	r3, r3, #1
 8002558:	b2db      	uxtb	r3, r3
 800255a:	2b01      	cmp	r3, #1
 800255c:	d102      	bne.n	8002564 <HAL_RCC_ClockConfig+0x128>
 800255e:	4b4f      	ldr	r3, [pc, #316]	; (800269c <HAL_RCC_ClockConfig+0x260>)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	e00f      	b.n	8002584 <HAL_RCC_ClockConfig+0x148>
 8002564:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002568:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800256a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800256c:	fa93 f3a3 	rbit	r3, r3
 8002570:	647b      	str	r3, [r7, #68]	; 0x44
 8002572:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002576:	643b      	str	r3, [r7, #64]	; 0x40
 8002578:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800257a:	fa93 f3a3 	rbit	r3, r3
 800257e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002580:	4b46      	ldr	r3, [pc, #280]	; (800269c <HAL_RCC_ClockConfig+0x260>)
 8002582:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002584:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002588:	63ba      	str	r2, [r7, #56]	; 0x38
 800258a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800258c:	fa92 f2a2 	rbit	r2, r2
 8002590:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8002592:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002594:	fab2 f282 	clz	r2, r2
 8002598:	b2d2      	uxtb	r2, r2
 800259a:	f042 0220 	orr.w	r2, r2, #32
 800259e:	b2d2      	uxtb	r2, r2
 80025a0:	f002 021f 	and.w	r2, r2, #31
 80025a4:	2101      	movs	r1, #1
 80025a6:	fa01 f202 	lsl.w	r2, r1, r2
 80025aa:	4013      	ands	r3, r2
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d13a      	bne.n	8002626 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80025b0:	2301      	movs	r3, #1
 80025b2:	e0b2      	b.n	800271a <HAL_RCC_ClockConfig+0x2de>
 80025b4:	2302      	movs	r3, #2
 80025b6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025ba:	fa93 f3a3 	rbit	r3, r3
 80025be:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80025c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025c2:	fab3 f383 	clz	r3, r3
 80025c6:	b2db      	uxtb	r3, r3
 80025c8:	095b      	lsrs	r3, r3, #5
 80025ca:	b2db      	uxtb	r3, r3
 80025cc:	f043 0301 	orr.w	r3, r3, #1
 80025d0:	b2db      	uxtb	r3, r3
 80025d2:	2b01      	cmp	r3, #1
 80025d4:	d102      	bne.n	80025dc <HAL_RCC_ClockConfig+0x1a0>
 80025d6:	4b31      	ldr	r3, [pc, #196]	; (800269c <HAL_RCC_ClockConfig+0x260>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	e00d      	b.n	80025f8 <HAL_RCC_ClockConfig+0x1bc>
 80025dc:	2302      	movs	r3, #2
 80025de:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025e2:	fa93 f3a3 	rbit	r3, r3
 80025e6:	627b      	str	r3, [r7, #36]	; 0x24
 80025e8:	2302      	movs	r3, #2
 80025ea:	623b      	str	r3, [r7, #32]
 80025ec:	6a3b      	ldr	r3, [r7, #32]
 80025ee:	fa93 f3a3 	rbit	r3, r3
 80025f2:	61fb      	str	r3, [r7, #28]
 80025f4:	4b29      	ldr	r3, [pc, #164]	; (800269c <HAL_RCC_ClockConfig+0x260>)
 80025f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025f8:	2202      	movs	r2, #2
 80025fa:	61ba      	str	r2, [r7, #24]
 80025fc:	69ba      	ldr	r2, [r7, #24]
 80025fe:	fa92 f2a2 	rbit	r2, r2
 8002602:	617a      	str	r2, [r7, #20]
  return result;
 8002604:	697a      	ldr	r2, [r7, #20]
 8002606:	fab2 f282 	clz	r2, r2
 800260a:	b2d2      	uxtb	r2, r2
 800260c:	f042 0220 	orr.w	r2, r2, #32
 8002610:	b2d2      	uxtb	r2, r2
 8002612:	f002 021f 	and.w	r2, r2, #31
 8002616:	2101      	movs	r1, #1
 8002618:	fa01 f202 	lsl.w	r2, r1, r2
 800261c:	4013      	ands	r3, r2
 800261e:	2b00      	cmp	r3, #0
 8002620:	d101      	bne.n	8002626 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002622:	2301      	movs	r3, #1
 8002624:	e079      	b.n	800271a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002626:	4b1d      	ldr	r3, [pc, #116]	; (800269c <HAL_RCC_ClockConfig+0x260>)
 8002628:	685b      	ldr	r3, [r3, #4]
 800262a:	f023 0203 	bic.w	r2, r3, #3
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	685b      	ldr	r3, [r3, #4]
 8002632:	491a      	ldr	r1, [pc, #104]	; (800269c <HAL_RCC_ClockConfig+0x260>)
 8002634:	4313      	orrs	r3, r2
 8002636:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002638:	f7fe fadc 	bl	8000bf4 <HAL_GetTick>
 800263c:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800263e:	e00a      	b.n	8002656 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002640:	f7fe fad8 	bl	8000bf4 <HAL_GetTick>
 8002644:	4602      	mov	r2, r0
 8002646:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002648:	1ad3      	subs	r3, r2, r3
 800264a:	f241 3288 	movw	r2, #5000	; 0x1388
 800264e:	4293      	cmp	r3, r2
 8002650:	d901      	bls.n	8002656 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002652:	2303      	movs	r3, #3
 8002654:	e061      	b.n	800271a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002656:	4b11      	ldr	r3, [pc, #68]	; (800269c <HAL_RCC_ClockConfig+0x260>)
 8002658:	685b      	ldr	r3, [r3, #4]
 800265a:	f003 020c 	and.w	r2, r3, #12
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	685b      	ldr	r3, [r3, #4]
 8002662:	009b      	lsls	r3, r3, #2
 8002664:	429a      	cmp	r2, r3
 8002666:	d1eb      	bne.n	8002640 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002668:	4b0b      	ldr	r3, [pc, #44]	; (8002698 <HAL_RCC_ClockConfig+0x25c>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f003 0307 	and.w	r3, r3, #7
 8002670:	683a      	ldr	r2, [r7, #0]
 8002672:	429a      	cmp	r2, r3
 8002674:	d214      	bcs.n	80026a0 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002676:	4b08      	ldr	r3, [pc, #32]	; (8002698 <HAL_RCC_ClockConfig+0x25c>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f023 0207 	bic.w	r2, r3, #7
 800267e:	4906      	ldr	r1, [pc, #24]	; (8002698 <HAL_RCC_ClockConfig+0x25c>)
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	4313      	orrs	r3, r2
 8002684:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002686:	4b04      	ldr	r3, [pc, #16]	; (8002698 <HAL_RCC_ClockConfig+0x25c>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f003 0307 	and.w	r3, r3, #7
 800268e:	683a      	ldr	r2, [r7, #0]
 8002690:	429a      	cmp	r2, r3
 8002692:	d005      	beq.n	80026a0 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002694:	2301      	movs	r3, #1
 8002696:	e040      	b.n	800271a <HAL_RCC_ClockConfig+0x2de>
 8002698:	40022000 	.word	0x40022000
 800269c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f003 0304 	and.w	r3, r3, #4
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d008      	beq.n	80026be <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80026ac:	4b1d      	ldr	r3, [pc, #116]	; (8002724 <HAL_RCC_ClockConfig+0x2e8>)
 80026ae:	685b      	ldr	r3, [r3, #4]
 80026b0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	68db      	ldr	r3, [r3, #12]
 80026b8:	491a      	ldr	r1, [pc, #104]	; (8002724 <HAL_RCC_ClockConfig+0x2e8>)
 80026ba:	4313      	orrs	r3, r2
 80026bc:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f003 0308 	and.w	r3, r3, #8
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d009      	beq.n	80026de <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80026ca:	4b16      	ldr	r3, [pc, #88]	; (8002724 <HAL_RCC_ClockConfig+0x2e8>)
 80026cc:	685b      	ldr	r3, [r3, #4]
 80026ce:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	691b      	ldr	r3, [r3, #16]
 80026d6:	00db      	lsls	r3, r3, #3
 80026d8:	4912      	ldr	r1, [pc, #72]	; (8002724 <HAL_RCC_ClockConfig+0x2e8>)
 80026da:	4313      	orrs	r3, r2
 80026dc:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80026de:	f000 f829 	bl	8002734 <HAL_RCC_GetSysClockFreq>
 80026e2:	4601      	mov	r1, r0
 80026e4:	4b0f      	ldr	r3, [pc, #60]	; (8002724 <HAL_RCC_ClockConfig+0x2e8>)
 80026e6:	685b      	ldr	r3, [r3, #4]
 80026e8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80026ec:	22f0      	movs	r2, #240	; 0xf0
 80026ee:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026f0:	693a      	ldr	r2, [r7, #16]
 80026f2:	fa92 f2a2 	rbit	r2, r2
 80026f6:	60fa      	str	r2, [r7, #12]
  return result;
 80026f8:	68fa      	ldr	r2, [r7, #12]
 80026fa:	fab2 f282 	clz	r2, r2
 80026fe:	b2d2      	uxtb	r2, r2
 8002700:	40d3      	lsrs	r3, r2
 8002702:	4a09      	ldr	r2, [pc, #36]	; (8002728 <HAL_RCC_ClockConfig+0x2ec>)
 8002704:	5cd3      	ldrb	r3, [r2, r3]
 8002706:	fa21 f303 	lsr.w	r3, r1, r3
 800270a:	4a08      	ldr	r2, [pc, #32]	; (800272c <HAL_RCC_ClockConfig+0x2f0>)
 800270c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800270e:	4b08      	ldr	r3, [pc, #32]	; (8002730 <HAL_RCC_ClockConfig+0x2f4>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	4618      	mov	r0, r3
 8002714:	f7fe fa2a 	bl	8000b6c <HAL_InitTick>
  
  return HAL_OK;
 8002718:	2300      	movs	r3, #0
}
 800271a:	4618      	mov	r0, r3
 800271c:	3778      	adds	r7, #120	; 0x78
 800271e:	46bd      	mov	sp, r7
 8002720:	bd80      	pop	{r7, pc}
 8002722:	bf00      	nop
 8002724:	40021000 	.word	0x40021000
 8002728:	08003388 	.word	0x08003388
 800272c:	20000000 	.word	0x20000000
 8002730:	20000004 	.word	0x20000004

08002734 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002734:	b480      	push	{r7}
 8002736:	b08b      	sub	sp, #44	; 0x2c
 8002738:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800273a:	2300      	movs	r3, #0
 800273c:	61fb      	str	r3, [r7, #28]
 800273e:	2300      	movs	r3, #0
 8002740:	61bb      	str	r3, [r7, #24]
 8002742:	2300      	movs	r3, #0
 8002744:	627b      	str	r3, [r7, #36]	; 0x24
 8002746:	2300      	movs	r3, #0
 8002748:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800274a:	2300      	movs	r3, #0
 800274c:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800274e:	4b29      	ldr	r3, [pc, #164]	; (80027f4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002750:	685b      	ldr	r3, [r3, #4]
 8002752:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002754:	69fb      	ldr	r3, [r7, #28]
 8002756:	f003 030c 	and.w	r3, r3, #12
 800275a:	2b04      	cmp	r3, #4
 800275c:	d002      	beq.n	8002764 <HAL_RCC_GetSysClockFreq+0x30>
 800275e:	2b08      	cmp	r3, #8
 8002760:	d003      	beq.n	800276a <HAL_RCC_GetSysClockFreq+0x36>
 8002762:	e03c      	b.n	80027de <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002764:	4b24      	ldr	r3, [pc, #144]	; (80027f8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002766:	623b      	str	r3, [r7, #32]
      break;
 8002768:	e03c      	b.n	80027e4 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800276a:	69fb      	ldr	r3, [r7, #28]
 800276c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002770:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002774:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002776:	68ba      	ldr	r2, [r7, #8]
 8002778:	fa92 f2a2 	rbit	r2, r2
 800277c:	607a      	str	r2, [r7, #4]
  return result;
 800277e:	687a      	ldr	r2, [r7, #4]
 8002780:	fab2 f282 	clz	r2, r2
 8002784:	b2d2      	uxtb	r2, r2
 8002786:	40d3      	lsrs	r3, r2
 8002788:	4a1c      	ldr	r2, [pc, #112]	; (80027fc <HAL_RCC_GetSysClockFreq+0xc8>)
 800278a:	5cd3      	ldrb	r3, [r2, r3]
 800278c:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800278e:	4b19      	ldr	r3, [pc, #100]	; (80027f4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002790:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002792:	f003 030f 	and.w	r3, r3, #15
 8002796:	220f      	movs	r2, #15
 8002798:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800279a:	693a      	ldr	r2, [r7, #16]
 800279c:	fa92 f2a2 	rbit	r2, r2
 80027a0:	60fa      	str	r2, [r7, #12]
  return result;
 80027a2:	68fa      	ldr	r2, [r7, #12]
 80027a4:	fab2 f282 	clz	r2, r2
 80027a8:	b2d2      	uxtb	r2, r2
 80027aa:	40d3      	lsrs	r3, r2
 80027ac:	4a14      	ldr	r2, [pc, #80]	; (8002800 <HAL_RCC_GetSysClockFreq+0xcc>)
 80027ae:	5cd3      	ldrb	r3, [r2, r3]
 80027b0:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80027b2:	69fb      	ldr	r3, [r7, #28]
 80027b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d008      	beq.n	80027ce <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80027bc:	4a0e      	ldr	r2, [pc, #56]	; (80027f8 <HAL_RCC_GetSysClockFreq+0xc4>)
 80027be:	69bb      	ldr	r3, [r7, #24]
 80027c0:	fbb2 f2f3 	udiv	r2, r2, r3
 80027c4:	697b      	ldr	r3, [r7, #20]
 80027c6:	fb02 f303 	mul.w	r3, r2, r3
 80027ca:	627b      	str	r3, [r7, #36]	; 0x24
 80027cc:	e004      	b.n	80027d8 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80027ce:	697b      	ldr	r3, [r7, #20]
 80027d0:	4a0c      	ldr	r2, [pc, #48]	; (8002804 <HAL_RCC_GetSysClockFreq+0xd0>)
 80027d2:	fb02 f303 	mul.w	r3, r2, r3
 80027d6:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80027d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027da:	623b      	str	r3, [r7, #32]
      break;
 80027dc:	e002      	b.n	80027e4 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80027de:	4b06      	ldr	r3, [pc, #24]	; (80027f8 <HAL_RCC_GetSysClockFreq+0xc4>)
 80027e0:	623b      	str	r3, [r7, #32]
      break;
 80027e2:	bf00      	nop
    }
  }
  return sysclockfreq;
 80027e4:	6a3b      	ldr	r3, [r7, #32]
}
 80027e6:	4618      	mov	r0, r3
 80027e8:	372c      	adds	r7, #44	; 0x2c
 80027ea:	46bd      	mov	sp, r7
 80027ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f0:	4770      	bx	lr
 80027f2:	bf00      	nop
 80027f4:	40021000 	.word	0x40021000
 80027f8:	007a1200 	.word	0x007a1200
 80027fc:	08003398 	.word	0x08003398
 8002800:	080033a8 	.word	0x080033a8
 8002804:	003d0900 	.word	0x003d0900

08002808 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b092      	sub	sp, #72	; 0x48
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002810:	2300      	movs	r3, #0
 8002812:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8002814:	2300      	movs	r3, #0
 8002816:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002818:	2300      	movs	r3, #0
 800281a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002826:	2b00      	cmp	r3, #0
 8002828:	f000 80d4 	beq.w	80029d4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800282c:	4b4e      	ldr	r3, [pc, #312]	; (8002968 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800282e:	69db      	ldr	r3, [r3, #28]
 8002830:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002834:	2b00      	cmp	r3, #0
 8002836:	d10e      	bne.n	8002856 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002838:	4b4b      	ldr	r3, [pc, #300]	; (8002968 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800283a:	69db      	ldr	r3, [r3, #28]
 800283c:	4a4a      	ldr	r2, [pc, #296]	; (8002968 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800283e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002842:	61d3      	str	r3, [r2, #28]
 8002844:	4b48      	ldr	r3, [pc, #288]	; (8002968 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002846:	69db      	ldr	r3, [r3, #28]
 8002848:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800284c:	60bb      	str	r3, [r7, #8]
 800284e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002850:	2301      	movs	r3, #1
 8002852:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002856:	4b45      	ldr	r3, [pc, #276]	; (800296c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800285e:	2b00      	cmp	r3, #0
 8002860:	d118      	bne.n	8002894 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002862:	4b42      	ldr	r3, [pc, #264]	; (800296c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	4a41      	ldr	r2, [pc, #260]	; (800296c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002868:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800286c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800286e:	f7fe f9c1 	bl	8000bf4 <HAL_GetTick>
 8002872:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002874:	e008      	b.n	8002888 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002876:	f7fe f9bd 	bl	8000bf4 <HAL_GetTick>
 800287a:	4602      	mov	r2, r0
 800287c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800287e:	1ad3      	subs	r3, r2, r3
 8002880:	2b64      	cmp	r3, #100	; 0x64
 8002882:	d901      	bls.n	8002888 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002884:	2303      	movs	r3, #3
 8002886:	e169      	b.n	8002b5c <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002888:	4b38      	ldr	r3, [pc, #224]	; (800296c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002890:	2b00      	cmp	r3, #0
 8002892:	d0f0      	beq.n	8002876 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002894:	4b34      	ldr	r3, [pc, #208]	; (8002968 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002896:	6a1b      	ldr	r3, [r3, #32]
 8002898:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800289c:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800289e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	f000 8084 	beq.w	80029ae <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	685b      	ldr	r3, [r3, #4]
 80028aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80028ae:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80028b0:	429a      	cmp	r2, r3
 80028b2:	d07c      	beq.n	80029ae <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80028b4:	4b2c      	ldr	r3, [pc, #176]	; (8002968 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028b6:	6a1b      	ldr	r3, [r3, #32]
 80028b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80028bc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80028be:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80028c2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028c6:	fa93 f3a3 	rbit	r3, r3
 80028ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80028cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80028ce:	fab3 f383 	clz	r3, r3
 80028d2:	b2db      	uxtb	r3, r3
 80028d4:	461a      	mov	r2, r3
 80028d6:	4b26      	ldr	r3, [pc, #152]	; (8002970 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80028d8:	4413      	add	r3, r2
 80028da:	009b      	lsls	r3, r3, #2
 80028dc:	461a      	mov	r2, r3
 80028de:	2301      	movs	r3, #1
 80028e0:	6013      	str	r3, [r2, #0]
 80028e2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80028e6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028ea:	fa93 f3a3 	rbit	r3, r3
 80028ee:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80028f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80028f2:	fab3 f383 	clz	r3, r3
 80028f6:	b2db      	uxtb	r3, r3
 80028f8:	461a      	mov	r2, r3
 80028fa:	4b1d      	ldr	r3, [pc, #116]	; (8002970 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80028fc:	4413      	add	r3, r2
 80028fe:	009b      	lsls	r3, r3, #2
 8002900:	461a      	mov	r2, r3
 8002902:	2300      	movs	r3, #0
 8002904:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002906:	4a18      	ldr	r2, [pc, #96]	; (8002968 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002908:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800290a:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800290c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800290e:	f003 0301 	and.w	r3, r3, #1
 8002912:	2b00      	cmp	r3, #0
 8002914:	d04b      	beq.n	80029ae <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002916:	f7fe f96d 	bl	8000bf4 <HAL_GetTick>
 800291a:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800291c:	e00a      	b.n	8002934 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800291e:	f7fe f969 	bl	8000bf4 <HAL_GetTick>
 8002922:	4602      	mov	r2, r0
 8002924:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002926:	1ad3      	subs	r3, r2, r3
 8002928:	f241 3288 	movw	r2, #5000	; 0x1388
 800292c:	4293      	cmp	r3, r2
 800292e:	d901      	bls.n	8002934 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002930:	2303      	movs	r3, #3
 8002932:	e113      	b.n	8002b5c <HAL_RCCEx_PeriphCLKConfig+0x354>
 8002934:	2302      	movs	r3, #2
 8002936:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002938:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800293a:	fa93 f3a3 	rbit	r3, r3
 800293e:	627b      	str	r3, [r7, #36]	; 0x24
 8002940:	2302      	movs	r3, #2
 8002942:	623b      	str	r3, [r7, #32]
 8002944:	6a3b      	ldr	r3, [r7, #32]
 8002946:	fa93 f3a3 	rbit	r3, r3
 800294a:	61fb      	str	r3, [r7, #28]
  return result;
 800294c:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800294e:	fab3 f383 	clz	r3, r3
 8002952:	b2db      	uxtb	r3, r3
 8002954:	095b      	lsrs	r3, r3, #5
 8002956:	b2db      	uxtb	r3, r3
 8002958:	f043 0302 	orr.w	r3, r3, #2
 800295c:	b2db      	uxtb	r3, r3
 800295e:	2b02      	cmp	r3, #2
 8002960:	d108      	bne.n	8002974 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8002962:	4b01      	ldr	r3, [pc, #4]	; (8002968 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002964:	6a1b      	ldr	r3, [r3, #32]
 8002966:	e00d      	b.n	8002984 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8002968:	40021000 	.word	0x40021000
 800296c:	40007000 	.word	0x40007000
 8002970:	10908100 	.word	0x10908100
 8002974:	2302      	movs	r3, #2
 8002976:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002978:	69bb      	ldr	r3, [r7, #24]
 800297a:	fa93 f3a3 	rbit	r3, r3
 800297e:	617b      	str	r3, [r7, #20]
 8002980:	4b78      	ldr	r3, [pc, #480]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002982:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002984:	2202      	movs	r2, #2
 8002986:	613a      	str	r2, [r7, #16]
 8002988:	693a      	ldr	r2, [r7, #16]
 800298a:	fa92 f2a2 	rbit	r2, r2
 800298e:	60fa      	str	r2, [r7, #12]
  return result;
 8002990:	68fa      	ldr	r2, [r7, #12]
 8002992:	fab2 f282 	clz	r2, r2
 8002996:	b2d2      	uxtb	r2, r2
 8002998:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800299c:	b2d2      	uxtb	r2, r2
 800299e:	f002 021f 	and.w	r2, r2, #31
 80029a2:	2101      	movs	r1, #1
 80029a4:	fa01 f202 	lsl.w	r2, r1, r2
 80029a8:	4013      	ands	r3, r2
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d0b7      	beq.n	800291e <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80029ae:	4b6d      	ldr	r3, [pc, #436]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80029b0:	6a1b      	ldr	r3, [r3, #32]
 80029b2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	685b      	ldr	r3, [r3, #4]
 80029ba:	496a      	ldr	r1, [pc, #424]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80029bc:	4313      	orrs	r3, r2
 80029be:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80029c0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80029c4:	2b01      	cmp	r3, #1
 80029c6:	d105      	bne.n	80029d4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80029c8:	4b66      	ldr	r3, [pc, #408]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80029ca:	69db      	ldr	r3, [r3, #28]
 80029cc:	4a65      	ldr	r2, [pc, #404]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80029ce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80029d2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f003 0301 	and.w	r3, r3, #1
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d008      	beq.n	80029f2 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80029e0:	4b60      	ldr	r3, [pc, #384]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80029e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029e4:	f023 0203 	bic.w	r2, r3, #3
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	689b      	ldr	r3, [r3, #8]
 80029ec:	495d      	ldr	r1, [pc, #372]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80029ee:	4313      	orrs	r3, r2
 80029f0:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f003 0302 	and.w	r3, r3, #2
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d008      	beq.n	8002a10 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80029fe:	4b59      	ldr	r3, [pc, #356]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a02:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	68db      	ldr	r3, [r3, #12]
 8002a0a:	4956      	ldr	r1, [pc, #344]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002a0c:	4313      	orrs	r3, r2
 8002a0e:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f003 0304 	and.w	r3, r3, #4
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d008      	beq.n	8002a2e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002a1c:	4b51      	ldr	r3, [pc, #324]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002a1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a20:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	691b      	ldr	r3, [r3, #16]
 8002a28:	494e      	ldr	r1, [pc, #312]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002a2a:	4313      	orrs	r3, r2
 8002a2c:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f003 0320 	and.w	r3, r3, #32
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d008      	beq.n	8002a4c <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002a3a:	4b4a      	ldr	r3, [pc, #296]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a3e:	f023 0210 	bic.w	r2, r3, #16
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	69db      	ldr	r3, [r3, #28]
 8002a46:	4947      	ldr	r1, [pc, #284]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002a48:	4313      	orrs	r3, r2
 8002a4a:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d008      	beq.n	8002a6a <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8002a58:	4b42      	ldr	r3, [pc, #264]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002a5a:	685b      	ldr	r3, [r3, #4]
 8002a5c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a64:	493f      	ldr	r1, [pc, #252]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002a66:	4313      	orrs	r3, r2
 8002a68:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d008      	beq.n	8002a88 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002a76:	4b3b      	ldr	r3, [pc, #236]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a7a:	f023 0220 	bic.w	r2, r3, #32
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6a1b      	ldr	r3, [r3, #32]
 8002a82:	4938      	ldr	r1, [pc, #224]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002a84:	4313      	orrs	r3, r2
 8002a86:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f003 0308 	and.w	r3, r3, #8
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d008      	beq.n	8002aa6 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002a94:	4b33      	ldr	r3, [pc, #204]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002a96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a98:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	695b      	ldr	r3, [r3, #20]
 8002aa0:	4930      	ldr	r1, [pc, #192]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002aa2:	4313      	orrs	r3, r2
 8002aa4:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f003 0310 	and.w	r3, r3, #16
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d008      	beq.n	8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002ab2:	4b2c      	ldr	r3, [pc, #176]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ab6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	699b      	ldr	r3, [r3, #24]
 8002abe:	4929      	ldr	r1, [pc, #164]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002ac0:	4313      	orrs	r3, r2
 8002ac2:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d008      	beq.n	8002ae2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002ad0:	4b24      	ldr	r3, [pc, #144]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002ad2:	685b      	ldr	r3, [r3, #4]
 8002ad4:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002adc:	4921      	ldr	r1, [pc, #132]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002ade:	4313      	orrs	r3, r2
 8002ae0:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d008      	beq.n	8002b00 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002aee:	4b1d      	ldr	r3, [pc, #116]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002af0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002af2:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002afa:	491a      	ldr	r1, [pc, #104]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002afc:	4313      	orrs	r3, r2
 8002afe:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d008      	beq.n	8002b1e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8002b0c:	4b15      	ldr	r3, [pc, #84]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002b0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b10:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b18:	4912      	ldr	r1, [pc, #72]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002b1a:	4313      	orrs	r3, r2
 8002b1c:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d008      	beq.n	8002b3c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002b2a:	4b0e      	ldr	r3, [pc, #56]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b2e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b36:	490b      	ldr	r1, [pc, #44]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002b38:	4313      	orrs	r3, r2
 8002b3a:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d008      	beq.n	8002b5a <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8002b48:	4b06      	ldr	r3, [pc, #24]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002b4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b4c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b54:	4903      	ldr	r1, [pc, #12]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002b56:	4313      	orrs	r3, r2
 8002b58:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002b5a:	2300      	movs	r3, #0
}
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	3748      	adds	r7, #72	; 0x48
 8002b60:	46bd      	mov	sp, r7
 8002b62:	bd80      	pop	{r7, pc}
 8002b64:	40021000 	.word	0x40021000

08002b68 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b084      	sub	sp, #16
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d101      	bne.n	8002b7a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002b76:	2301      	movs	r3, #1
 8002b78:	e09d      	b.n	8002cb6 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d108      	bne.n	8002b94 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	685b      	ldr	r3, [r3, #4]
 8002b86:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002b8a:	d009      	beq.n	8002ba0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2200      	movs	r2, #0
 8002b90:	61da      	str	r2, [r3, #28]
 8002b92:	e005      	b.n	8002ba0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2200      	movs	r2, #0
 8002b98:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002bac:	b2db      	uxtb	r3, r3
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d106      	bne.n	8002bc0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002bba:	6878      	ldr	r0, [r7, #4]
 8002bbc:	f7fd fee4 	bl	8000988 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2202      	movs	r2, #2
 8002bc4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	681a      	ldr	r2, [r3, #0]
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002bd6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	68db      	ldr	r3, [r3, #12]
 8002bdc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002be0:	d902      	bls.n	8002be8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002be2:	2300      	movs	r3, #0
 8002be4:	60fb      	str	r3, [r7, #12]
 8002be6:	e002      	b.n	8002bee <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002be8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002bec:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	68db      	ldr	r3, [r3, #12]
 8002bf2:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8002bf6:	d007      	beq.n	8002c08 <HAL_SPI_Init+0xa0>
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	68db      	ldr	r3, [r3, #12]
 8002bfc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002c00:	d002      	beq.n	8002c08 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	2200      	movs	r2, #0
 8002c06:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	685b      	ldr	r3, [r3, #4]
 8002c0c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	689b      	ldr	r3, [r3, #8]
 8002c14:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002c18:	431a      	orrs	r2, r3
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	691b      	ldr	r3, [r3, #16]
 8002c1e:	f003 0302 	and.w	r3, r3, #2
 8002c22:	431a      	orrs	r2, r3
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	695b      	ldr	r3, [r3, #20]
 8002c28:	f003 0301 	and.w	r3, r3, #1
 8002c2c:	431a      	orrs	r2, r3
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	699b      	ldr	r3, [r3, #24]
 8002c32:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002c36:	431a      	orrs	r2, r3
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	69db      	ldr	r3, [r3, #28]
 8002c3c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002c40:	431a      	orrs	r2, r3
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	6a1b      	ldr	r3, [r3, #32]
 8002c46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c4a:	ea42 0103 	orr.w	r1, r2, r3
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c52:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	430a      	orrs	r2, r1
 8002c5c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	699b      	ldr	r3, [r3, #24]
 8002c62:	0c1b      	lsrs	r3, r3, #16
 8002c64:	f003 0204 	and.w	r2, r3, #4
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c6c:	f003 0310 	and.w	r3, r3, #16
 8002c70:	431a      	orrs	r2, r3
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c76:	f003 0308 	and.w	r3, r3, #8
 8002c7a:	431a      	orrs	r2, r3
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	68db      	ldr	r3, [r3, #12]
 8002c80:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8002c84:	ea42 0103 	orr.w	r1, r2, r3
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	430a      	orrs	r2, r1
 8002c94:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	69da      	ldr	r2, [r3, #28]
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002ca4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	2200      	movs	r2, #0
 8002caa:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2201      	movs	r2, #1
 8002cb0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8002cb4:	2300      	movs	r3, #0
}
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	3710      	adds	r7, #16
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	bd80      	pop	{r7, pc}

08002cbe <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002cbe:	b580      	push	{r7, lr}
 8002cc0:	b082      	sub	sp, #8
 8002cc2:	af00      	add	r7, sp, #0
 8002cc4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d101      	bne.n	8002cd0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002ccc:	2301      	movs	r3, #1
 8002cce:	e049      	b.n	8002d64 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002cd6:	b2db      	uxtb	r3, r3
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d106      	bne.n	8002cea <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2200      	movs	r2, #0
 8002ce0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002ce4:	6878      	ldr	r0, [r7, #4]
 8002ce6:	f7fd fe91 	bl	8000a0c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	2202      	movs	r2, #2
 8002cee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681a      	ldr	r2, [r3, #0]
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	3304      	adds	r3, #4
 8002cfa:	4619      	mov	r1, r3
 8002cfc:	4610      	mov	r0, r2
 8002cfe:	f000 f961 	bl	8002fc4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	2201      	movs	r2, #1
 8002d06:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	2201      	movs	r2, #1
 8002d0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	2201      	movs	r2, #1
 8002d16:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	2201      	movs	r2, #1
 8002d1e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	2201      	movs	r2, #1
 8002d26:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	2201      	movs	r2, #1
 8002d2e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	2201      	movs	r2, #1
 8002d36:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	2201      	movs	r2, #1
 8002d3e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	2201      	movs	r2, #1
 8002d46:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	2201      	movs	r2, #1
 8002d4e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	2201      	movs	r2, #1
 8002d56:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	2201      	movs	r2, #1
 8002d5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002d62:	2300      	movs	r3, #0
}
 8002d64:	4618      	mov	r0, r3
 8002d66:	3708      	adds	r7, #8
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	bd80      	pop	{r7, pc}

08002d6c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002d6c:	b480      	push	{r7}
 8002d6e:	b085      	sub	sp, #20
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d7a:	b2db      	uxtb	r3, r3
 8002d7c:	2b01      	cmp	r3, #1
 8002d7e:	d001      	beq.n	8002d84 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002d80:	2301      	movs	r3, #1
 8002d82:	e042      	b.n	8002e0a <HAL_TIM_Base_Start+0x9e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2202      	movs	r2, #2
 8002d88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	4a21      	ldr	r2, [pc, #132]	; (8002e18 <HAL_TIM_Base_Start+0xac>)
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d018      	beq.n	8002dc8 <HAL_TIM_Base_Start+0x5c>
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d9e:	d013      	beq.n	8002dc8 <HAL_TIM_Base_Start+0x5c>
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	4a1d      	ldr	r2, [pc, #116]	; (8002e1c <HAL_TIM_Base_Start+0xb0>)
 8002da6:	4293      	cmp	r3, r2
 8002da8:	d00e      	beq.n	8002dc8 <HAL_TIM_Base_Start+0x5c>
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	4a1c      	ldr	r2, [pc, #112]	; (8002e20 <HAL_TIM_Base_Start+0xb4>)
 8002db0:	4293      	cmp	r3, r2
 8002db2:	d009      	beq.n	8002dc8 <HAL_TIM_Base_Start+0x5c>
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	4a1a      	ldr	r2, [pc, #104]	; (8002e24 <HAL_TIM_Base_Start+0xb8>)
 8002dba:	4293      	cmp	r3, r2
 8002dbc:	d004      	beq.n	8002dc8 <HAL_TIM_Base_Start+0x5c>
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	4a19      	ldr	r2, [pc, #100]	; (8002e28 <HAL_TIM_Base_Start+0xbc>)
 8002dc4:	4293      	cmp	r3, r2
 8002dc6:	d115      	bne.n	8002df4 <HAL_TIM_Base_Start+0x88>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	689a      	ldr	r2, [r3, #8]
 8002dce:	4b17      	ldr	r3, [pc, #92]	; (8002e2c <HAL_TIM_Base_Start+0xc0>)
 8002dd0:	4013      	ands	r3, r2
 8002dd2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	2b06      	cmp	r3, #6
 8002dd8:	d015      	beq.n	8002e06 <HAL_TIM_Base_Start+0x9a>
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002de0:	d011      	beq.n	8002e06 <HAL_TIM_Base_Start+0x9a>
    {
      __HAL_TIM_ENABLE(htim);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	681a      	ldr	r2, [r3, #0]
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f042 0201 	orr.w	r2, r2, #1
 8002df0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002df2:	e008      	b.n	8002e06 <HAL_TIM_Base_Start+0x9a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	681a      	ldr	r2, [r3, #0]
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f042 0201 	orr.w	r2, r2, #1
 8002e02:	601a      	str	r2, [r3, #0]
 8002e04:	e000      	b.n	8002e08 <HAL_TIM_Base_Start+0x9c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e06:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002e08:	2300      	movs	r3, #0
}
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	3714      	adds	r7, #20
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e14:	4770      	bx	lr
 8002e16:	bf00      	nop
 8002e18:	40012c00 	.word	0x40012c00
 8002e1c:	40000400 	.word	0x40000400
 8002e20:	40000800 	.word	0x40000800
 8002e24:	40013400 	.word	0x40013400
 8002e28:	40014000 	.word	0x40014000
 8002e2c:	00010007 	.word	0x00010007

08002e30 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b084      	sub	sp, #16
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
 8002e38:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e44:	2b01      	cmp	r3, #1
 8002e46:	d101      	bne.n	8002e4c <HAL_TIM_ConfigClockSource+0x1c>
 8002e48:	2302      	movs	r3, #2
 8002e4a:	e0b6      	b.n	8002fba <HAL_TIM_ConfigClockSource+0x18a>
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2201      	movs	r2, #1
 8002e50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	2202      	movs	r2, #2
 8002e58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	689b      	ldr	r3, [r3, #8]
 8002e62:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002e64:	68bb      	ldr	r3, [r7, #8]
 8002e66:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e6a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002e6e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002e70:	68bb      	ldr	r3, [r7, #8]
 8002e72:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002e76:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	68ba      	ldr	r2, [r7, #8]
 8002e7e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e88:	d03e      	beq.n	8002f08 <HAL_TIM_ConfigClockSource+0xd8>
 8002e8a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e8e:	f200 8087 	bhi.w	8002fa0 <HAL_TIM_ConfigClockSource+0x170>
 8002e92:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e96:	f000 8086 	beq.w	8002fa6 <HAL_TIM_ConfigClockSource+0x176>
 8002e9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e9e:	d87f      	bhi.n	8002fa0 <HAL_TIM_ConfigClockSource+0x170>
 8002ea0:	2b70      	cmp	r3, #112	; 0x70
 8002ea2:	d01a      	beq.n	8002eda <HAL_TIM_ConfigClockSource+0xaa>
 8002ea4:	2b70      	cmp	r3, #112	; 0x70
 8002ea6:	d87b      	bhi.n	8002fa0 <HAL_TIM_ConfigClockSource+0x170>
 8002ea8:	2b60      	cmp	r3, #96	; 0x60
 8002eaa:	d050      	beq.n	8002f4e <HAL_TIM_ConfigClockSource+0x11e>
 8002eac:	2b60      	cmp	r3, #96	; 0x60
 8002eae:	d877      	bhi.n	8002fa0 <HAL_TIM_ConfigClockSource+0x170>
 8002eb0:	2b50      	cmp	r3, #80	; 0x50
 8002eb2:	d03c      	beq.n	8002f2e <HAL_TIM_ConfigClockSource+0xfe>
 8002eb4:	2b50      	cmp	r3, #80	; 0x50
 8002eb6:	d873      	bhi.n	8002fa0 <HAL_TIM_ConfigClockSource+0x170>
 8002eb8:	2b40      	cmp	r3, #64	; 0x40
 8002eba:	d058      	beq.n	8002f6e <HAL_TIM_ConfigClockSource+0x13e>
 8002ebc:	2b40      	cmp	r3, #64	; 0x40
 8002ebe:	d86f      	bhi.n	8002fa0 <HAL_TIM_ConfigClockSource+0x170>
 8002ec0:	2b30      	cmp	r3, #48	; 0x30
 8002ec2:	d064      	beq.n	8002f8e <HAL_TIM_ConfigClockSource+0x15e>
 8002ec4:	2b30      	cmp	r3, #48	; 0x30
 8002ec6:	d86b      	bhi.n	8002fa0 <HAL_TIM_ConfigClockSource+0x170>
 8002ec8:	2b20      	cmp	r3, #32
 8002eca:	d060      	beq.n	8002f8e <HAL_TIM_ConfigClockSource+0x15e>
 8002ecc:	2b20      	cmp	r3, #32
 8002ece:	d867      	bhi.n	8002fa0 <HAL_TIM_ConfigClockSource+0x170>
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d05c      	beq.n	8002f8e <HAL_TIM_ConfigClockSource+0x15e>
 8002ed4:	2b10      	cmp	r3, #16
 8002ed6:	d05a      	beq.n	8002f8e <HAL_TIM_ConfigClockSource+0x15e>
 8002ed8:	e062      	b.n	8002fa0 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6818      	ldr	r0, [r3, #0]
 8002ede:	683b      	ldr	r3, [r7, #0]
 8002ee0:	6899      	ldr	r1, [r3, #8]
 8002ee2:	683b      	ldr	r3, [r7, #0]
 8002ee4:	685a      	ldr	r2, [r3, #4]
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	68db      	ldr	r3, [r3, #12]
 8002eea:	f000 f975 	bl	80031d8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	689b      	ldr	r3, [r3, #8]
 8002ef4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002ef6:	68bb      	ldr	r3, [r7, #8]
 8002ef8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002efc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	68ba      	ldr	r2, [r7, #8]
 8002f04:	609a      	str	r2, [r3, #8]
      break;
 8002f06:	e04f      	b.n	8002fa8 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6818      	ldr	r0, [r3, #0]
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	6899      	ldr	r1, [r3, #8]
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	685a      	ldr	r2, [r3, #4]
 8002f14:	683b      	ldr	r3, [r7, #0]
 8002f16:	68db      	ldr	r3, [r3, #12]
 8002f18:	f000 f95e 	bl	80031d8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	689a      	ldr	r2, [r3, #8]
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002f2a:	609a      	str	r2, [r3, #8]
      break;
 8002f2c:	e03c      	b.n	8002fa8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6818      	ldr	r0, [r3, #0]
 8002f32:	683b      	ldr	r3, [r7, #0]
 8002f34:	6859      	ldr	r1, [r3, #4]
 8002f36:	683b      	ldr	r3, [r7, #0]
 8002f38:	68db      	ldr	r3, [r3, #12]
 8002f3a:	461a      	mov	r2, r3
 8002f3c:	f000 f8d2 	bl	80030e4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	2150      	movs	r1, #80	; 0x50
 8002f46:	4618      	mov	r0, r3
 8002f48:	f000 f92b 	bl	80031a2 <TIM_ITRx_SetConfig>
      break;
 8002f4c:	e02c      	b.n	8002fa8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6818      	ldr	r0, [r3, #0]
 8002f52:	683b      	ldr	r3, [r7, #0]
 8002f54:	6859      	ldr	r1, [r3, #4]
 8002f56:	683b      	ldr	r3, [r7, #0]
 8002f58:	68db      	ldr	r3, [r3, #12]
 8002f5a:	461a      	mov	r2, r3
 8002f5c:	f000 f8f1 	bl	8003142 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	2160      	movs	r1, #96	; 0x60
 8002f66:	4618      	mov	r0, r3
 8002f68:	f000 f91b 	bl	80031a2 <TIM_ITRx_SetConfig>
      break;
 8002f6c:	e01c      	b.n	8002fa8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	6818      	ldr	r0, [r3, #0]
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	6859      	ldr	r1, [r3, #4]
 8002f76:	683b      	ldr	r3, [r7, #0]
 8002f78:	68db      	ldr	r3, [r3, #12]
 8002f7a:	461a      	mov	r2, r3
 8002f7c:	f000 f8b2 	bl	80030e4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	2140      	movs	r1, #64	; 0x40
 8002f86:	4618      	mov	r0, r3
 8002f88:	f000 f90b 	bl	80031a2 <TIM_ITRx_SetConfig>
      break;
 8002f8c:	e00c      	b.n	8002fa8 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681a      	ldr	r2, [r3, #0]
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	4619      	mov	r1, r3
 8002f98:	4610      	mov	r0, r2
 8002f9a:	f000 f902 	bl	80031a2 <TIM_ITRx_SetConfig>
      break;
 8002f9e:	e003      	b.n	8002fa8 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8002fa0:	2301      	movs	r3, #1
 8002fa2:	73fb      	strb	r3, [r7, #15]
      break;
 8002fa4:	e000      	b.n	8002fa8 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8002fa6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2201      	movs	r2, #1
 8002fac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002fb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fba:	4618      	mov	r0, r3
 8002fbc:	3710      	adds	r7, #16
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	bd80      	pop	{r7, pc}
	...

08002fc4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002fc4:	b480      	push	{r7}
 8002fc6:	b085      	sub	sp, #20
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
 8002fcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	4a3c      	ldr	r2, [pc, #240]	; (80030c8 <TIM_Base_SetConfig+0x104>)
 8002fd8:	4293      	cmp	r3, r2
 8002fda:	d00f      	beq.n	8002ffc <TIM_Base_SetConfig+0x38>
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fe2:	d00b      	beq.n	8002ffc <TIM_Base_SetConfig+0x38>
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	4a39      	ldr	r2, [pc, #228]	; (80030cc <TIM_Base_SetConfig+0x108>)
 8002fe8:	4293      	cmp	r3, r2
 8002fea:	d007      	beq.n	8002ffc <TIM_Base_SetConfig+0x38>
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	4a38      	ldr	r2, [pc, #224]	; (80030d0 <TIM_Base_SetConfig+0x10c>)
 8002ff0:	4293      	cmp	r3, r2
 8002ff2:	d003      	beq.n	8002ffc <TIM_Base_SetConfig+0x38>
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	4a37      	ldr	r2, [pc, #220]	; (80030d4 <TIM_Base_SetConfig+0x110>)
 8002ff8:	4293      	cmp	r3, r2
 8002ffa:	d108      	bne.n	800300e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003002:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	685b      	ldr	r3, [r3, #4]
 8003008:	68fa      	ldr	r2, [r7, #12]
 800300a:	4313      	orrs	r3, r2
 800300c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	4a2d      	ldr	r2, [pc, #180]	; (80030c8 <TIM_Base_SetConfig+0x104>)
 8003012:	4293      	cmp	r3, r2
 8003014:	d01b      	beq.n	800304e <TIM_Base_SetConfig+0x8a>
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800301c:	d017      	beq.n	800304e <TIM_Base_SetConfig+0x8a>
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	4a2a      	ldr	r2, [pc, #168]	; (80030cc <TIM_Base_SetConfig+0x108>)
 8003022:	4293      	cmp	r3, r2
 8003024:	d013      	beq.n	800304e <TIM_Base_SetConfig+0x8a>
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	4a29      	ldr	r2, [pc, #164]	; (80030d0 <TIM_Base_SetConfig+0x10c>)
 800302a:	4293      	cmp	r3, r2
 800302c:	d00f      	beq.n	800304e <TIM_Base_SetConfig+0x8a>
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	4a28      	ldr	r2, [pc, #160]	; (80030d4 <TIM_Base_SetConfig+0x110>)
 8003032:	4293      	cmp	r3, r2
 8003034:	d00b      	beq.n	800304e <TIM_Base_SetConfig+0x8a>
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	4a27      	ldr	r2, [pc, #156]	; (80030d8 <TIM_Base_SetConfig+0x114>)
 800303a:	4293      	cmp	r3, r2
 800303c:	d007      	beq.n	800304e <TIM_Base_SetConfig+0x8a>
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	4a26      	ldr	r2, [pc, #152]	; (80030dc <TIM_Base_SetConfig+0x118>)
 8003042:	4293      	cmp	r3, r2
 8003044:	d003      	beq.n	800304e <TIM_Base_SetConfig+0x8a>
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	4a25      	ldr	r2, [pc, #148]	; (80030e0 <TIM_Base_SetConfig+0x11c>)
 800304a:	4293      	cmp	r3, r2
 800304c:	d108      	bne.n	8003060 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003054:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	68db      	ldr	r3, [r3, #12]
 800305a:	68fa      	ldr	r2, [r7, #12]
 800305c:	4313      	orrs	r3, r2
 800305e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	695b      	ldr	r3, [r3, #20]
 800306a:	4313      	orrs	r3, r2
 800306c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	68fa      	ldr	r2, [r7, #12]
 8003072:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	689a      	ldr	r2, [r3, #8]
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	681a      	ldr	r2, [r3, #0]
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	4a10      	ldr	r2, [pc, #64]	; (80030c8 <TIM_Base_SetConfig+0x104>)
 8003088:	4293      	cmp	r3, r2
 800308a:	d00f      	beq.n	80030ac <TIM_Base_SetConfig+0xe8>
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	4a11      	ldr	r2, [pc, #68]	; (80030d4 <TIM_Base_SetConfig+0x110>)
 8003090:	4293      	cmp	r3, r2
 8003092:	d00b      	beq.n	80030ac <TIM_Base_SetConfig+0xe8>
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	4a10      	ldr	r2, [pc, #64]	; (80030d8 <TIM_Base_SetConfig+0x114>)
 8003098:	4293      	cmp	r3, r2
 800309a:	d007      	beq.n	80030ac <TIM_Base_SetConfig+0xe8>
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	4a0f      	ldr	r2, [pc, #60]	; (80030dc <TIM_Base_SetConfig+0x118>)
 80030a0:	4293      	cmp	r3, r2
 80030a2:	d003      	beq.n	80030ac <TIM_Base_SetConfig+0xe8>
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	4a0e      	ldr	r2, [pc, #56]	; (80030e0 <TIM_Base_SetConfig+0x11c>)
 80030a8:	4293      	cmp	r3, r2
 80030aa:	d103      	bne.n	80030b4 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	691a      	ldr	r2, [r3, #16]
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2201      	movs	r2, #1
 80030b8:	615a      	str	r2, [r3, #20]
}
 80030ba:	bf00      	nop
 80030bc:	3714      	adds	r7, #20
 80030be:	46bd      	mov	sp, r7
 80030c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c4:	4770      	bx	lr
 80030c6:	bf00      	nop
 80030c8:	40012c00 	.word	0x40012c00
 80030cc:	40000400 	.word	0x40000400
 80030d0:	40000800 	.word	0x40000800
 80030d4:	40013400 	.word	0x40013400
 80030d8:	40014000 	.word	0x40014000
 80030dc:	40014400 	.word	0x40014400
 80030e0:	40014800 	.word	0x40014800

080030e4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80030e4:	b480      	push	{r7}
 80030e6:	b087      	sub	sp, #28
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	60f8      	str	r0, [r7, #12]
 80030ec:	60b9      	str	r1, [r7, #8]
 80030ee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	6a1b      	ldr	r3, [r3, #32]
 80030f4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	6a1b      	ldr	r3, [r3, #32]
 80030fa:	f023 0201 	bic.w	r2, r3, #1
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	699b      	ldr	r3, [r3, #24]
 8003106:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003108:	693b      	ldr	r3, [r7, #16]
 800310a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800310e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	011b      	lsls	r3, r3, #4
 8003114:	693a      	ldr	r2, [r7, #16]
 8003116:	4313      	orrs	r3, r2
 8003118:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800311a:	697b      	ldr	r3, [r7, #20]
 800311c:	f023 030a 	bic.w	r3, r3, #10
 8003120:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003122:	697a      	ldr	r2, [r7, #20]
 8003124:	68bb      	ldr	r3, [r7, #8]
 8003126:	4313      	orrs	r3, r2
 8003128:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	693a      	ldr	r2, [r7, #16]
 800312e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	697a      	ldr	r2, [r7, #20]
 8003134:	621a      	str	r2, [r3, #32]
}
 8003136:	bf00      	nop
 8003138:	371c      	adds	r7, #28
 800313a:	46bd      	mov	sp, r7
 800313c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003140:	4770      	bx	lr

08003142 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003142:	b480      	push	{r7}
 8003144:	b087      	sub	sp, #28
 8003146:	af00      	add	r7, sp, #0
 8003148:	60f8      	str	r0, [r7, #12]
 800314a:	60b9      	str	r1, [r7, #8]
 800314c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	6a1b      	ldr	r3, [r3, #32]
 8003152:	f023 0210 	bic.w	r2, r3, #16
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	699b      	ldr	r3, [r3, #24]
 800315e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	6a1b      	ldr	r3, [r3, #32]
 8003164:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003166:	697b      	ldr	r3, [r7, #20]
 8003168:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800316c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	031b      	lsls	r3, r3, #12
 8003172:	697a      	ldr	r2, [r7, #20]
 8003174:	4313      	orrs	r3, r2
 8003176:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003178:	693b      	ldr	r3, [r7, #16]
 800317a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800317e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003180:	68bb      	ldr	r3, [r7, #8]
 8003182:	011b      	lsls	r3, r3, #4
 8003184:	693a      	ldr	r2, [r7, #16]
 8003186:	4313      	orrs	r3, r2
 8003188:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	697a      	ldr	r2, [r7, #20]
 800318e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	693a      	ldr	r2, [r7, #16]
 8003194:	621a      	str	r2, [r3, #32]
}
 8003196:	bf00      	nop
 8003198:	371c      	adds	r7, #28
 800319a:	46bd      	mov	sp, r7
 800319c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a0:	4770      	bx	lr

080031a2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80031a2:	b480      	push	{r7}
 80031a4:	b085      	sub	sp, #20
 80031a6:	af00      	add	r7, sp, #0
 80031a8:	6078      	str	r0, [r7, #4]
 80031aa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	689b      	ldr	r3, [r3, #8]
 80031b0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031b8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80031ba:	683a      	ldr	r2, [r7, #0]
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	4313      	orrs	r3, r2
 80031c0:	f043 0307 	orr.w	r3, r3, #7
 80031c4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	68fa      	ldr	r2, [r7, #12]
 80031ca:	609a      	str	r2, [r3, #8]
}
 80031cc:	bf00      	nop
 80031ce:	3714      	adds	r7, #20
 80031d0:	46bd      	mov	sp, r7
 80031d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d6:	4770      	bx	lr

080031d8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80031d8:	b480      	push	{r7}
 80031da:	b087      	sub	sp, #28
 80031dc:	af00      	add	r7, sp, #0
 80031de:	60f8      	str	r0, [r7, #12]
 80031e0:	60b9      	str	r1, [r7, #8]
 80031e2:	607a      	str	r2, [r7, #4]
 80031e4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	689b      	ldr	r3, [r3, #8]
 80031ea:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80031ec:	697b      	ldr	r3, [r7, #20]
 80031ee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80031f2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	021a      	lsls	r2, r3, #8
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	431a      	orrs	r2, r3
 80031fc:	68bb      	ldr	r3, [r7, #8]
 80031fe:	4313      	orrs	r3, r2
 8003200:	697a      	ldr	r2, [r7, #20]
 8003202:	4313      	orrs	r3, r2
 8003204:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	697a      	ldr	r2, [r7, #20]
 800320a:	609a      	str	r2, [r3, #8]
}
 800320c:	bf00      	nop
 800320e:	371c      	adds	r7, #28
 8003210:	46bd      	mov	sp, r7
 8003212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003216:	4770      	bx	lr

08003218 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003218:	b480      	push	{r7}
 800321a:	b085      	sub	sp, #20
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
 8003220:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003228:	2b01      	cmp	r3, #1
 800322a:	d101      	bne.n	8003230 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800322c:	2302      	movs	r3, #2
 800322e:	e063      	b.n	80032f8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2201      	movs	r2, #1
 8003234:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2202      	movs	r2, #2
 800323c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	685b      	ldr	r3, [r3, #4]
 8003246:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	689b      	ldr	r3, [r3, #8]
 800324e:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	4a2b      	ldr	r2, [pc, #172]	; (8003304 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003256:	4293      	cmp	r3, r2
 8003258:	d004      	beq.n	8003264 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	4a2a      	ldr	r2, [pc, #168]	; (8003308 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003260:	4293      	cmp	r3, r2
 8003262:	d108      	bne.n	8003276 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800326a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	685b      	ldr	r3, [r3, #4]
 8003270:	68fa      	ldr	r2, [r7, #12]
 8003272:	4313      	orrs	r3, r2
 8003274:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800327c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800327e:	683b      	ldr	r3, [r7, #0]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	68fa      	ldr	r2, [r7, #12]
 8003284:	4313      	orrs	r3, r2
 8003286:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	68fa      	ldr	r2, [r7, #12]
 800328e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	4a1b      	ldr	r2, [pc, #108]	; (8003304 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003296:	4293      	cmp	r3, r2
 8003298:	d018      	beq.n	80032cc <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032a2:	d013      	beq.n	80032cc <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	4a18      	ldr	r2, [pc, #96]	; (800330c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80032aa:	4293      	cmp	r3, r2
 80032ac:	d00e      	beq.n	80032cc <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	4a17      	ldr	r2, [pc, #92]	; (8003310 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80032b4:	4293      	cmp	r3, r2
 80032b6:	d009      	beq.n	80032cc <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	4a12      	ldr	r2, [pc, #72]	; (8003308 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80032be:	4293      	cmp	r3, r2
 80032c0:	d004      	beq.n	80032cc <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	4a13      	ldr	r2, [pc, #76]	; (8003314 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80032c8:	4293      	cmp	r3, r2
 80032ca:	d10c      	bne.n	80032e6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80032cc:	68bb      	ldr	r3, [r7, #8]
 80032ce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80032d2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	689b      	ldr	r3, [r3, #8]
 80032d8:	68ba      	ldr	r2, [r7, #8]
 80032da:	4313      	orrs	r3, r2
 80032dc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	68ba      	ldr	r2, [r7, #8]
 80032e4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	2201      	movs	r2, #1
 80032ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	2200      	movs	r2, #0
 80032f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80032f6:	2300      	movs	r3, #0
}
 80032f8:	4618      	mov	r0, r3
 80032fa:	3714      	adds	r7, #20
 80032fc:	46bd      	mov	sp, r7
 80032fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003302:	4770      	bx	lr
 8003304:	40012c00 	.word	0x40012c00
 8003308:	40013400 	.word	0x40013400
 800330c:	40000400 	.word	0x40000400
 8003310:	40000800 	.word	0x40000800
 8003314:	40014000 	.word	0x40014000

08003318 <__libc_init_array>:
 8003318:	b570      	push	{r4, r5, r6, lr}
 800331a:	4d0d      	ldr	r5, [pc, #52]	; (8003350 <__libc_init_array+0x38>)
 800331c:	4c0d      	ldr	r4, [pc, #52]	; (8003354 <__libc_init_array+0x3c>)
 800331e:	1b64      	subs	r4, r4, r5
 8003320:	10a4      	asrs	r4, r4, #2
 8003322:	2600      	movs	r6, #0
 8003324:	42a6      	cmp	r6, r4
 8003326:	d109      	bne.n	800333c <__libc_init_array+0x24>
 8003328:	4d0b      	ldr	r5, [pc, #44]	; (8003358 <__libc_init_array+0x40>)
 800332a:	4c0c      	ldr	r4, [pc, #48]	; (800335c <__libc_init_array+0x44>)
 800332c:	f000 f820 	bl	8003370 <_init>
 8003330:	1b64      	subs	r4, r4, r5
 8003332:	10a4      	asrs	r4, r4, #2
 8003334:	2600      	movs	r6, #0
 8003336:	42a6      	cmp	r6, r4
 8003338:	d105      	bne.n	8003346 <__libc_init_array+0x2e>
 800333a:	bd70      	pop	{r4, r5, r6, pc}
 800333c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003340:	4798      	blx	r3
 8003342:	3601      	adds	r6, #1
 8003344:	e7ee      	b.n	8003324 <__libc_init_array+0xc>
 8003346:	f855 3b04 	ldr.w	r3, [r5], #4
 800334a:	4798      	blx	r3
 800334c:	3601      	adds	r6, #1
 800334e:	e7f2      	b.n	8003336 <__libc_init_array+0x1e>
 8003350:	080033b8 	.word	0x080033b8
 8003354:	080033b8 	.word	0x080033b8
 8003358:	080033b8 	.word	0x080033b8
 800335c:	080033bc 	.word	0x080033bc

08003360 <memset>:
 8003360:	4402      	add	r2, r0
 8003362:	4603      	mov	r3, r0
 8003364:	4293      	cmp	r3, r2
 8003366:	d100      	bne.n	800336a <memset+0xa>
 8003368:	4770      	bx	lr
 800336a:	f803 1b01 	strb.w	r1, [r3], #1
 800336e:	e7f9      	b.n	8003364 <memset+0x4>

08003370 <_init>:
 8003370:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003372:	bf00      	nop
 8003374:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003376:	bc08      	pop	{r3}
 8003378:	469e      	mov	lr, r3
 800337a:	4770      	bx	lr

0800337c <_fini>:
 800337c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800337e:	bf00      	nop
 8003380:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003382:	bc08      	pop	{r3}
 8003384:	469e      	mov	lr, r3
 8003386:	4770      	bx	lr
